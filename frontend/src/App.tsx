import React, { useEffect, useState } from 'react';
import Showcase from './components/Showcase';
import DemoChat from './components/DemoChat';
import ReferralSystem from './components/ReferralSystem';
import UserProfile from './components/UserProfile';
import AnalyticsFeedback from './components/AnalyticsFeedback';
import ChannelAnalytics from './components/ChannelAnalytics';
import PostAnalytics from './components/PostAnalytics';
import TelegramIntegration from './components/TelegramIntegration';
import PostTracking from './components/PostTracking';
import TestBackButton from './components/TestBackButton';
import PostBuilder from './components/PostBuilder';
import WebAppInfo from './components/WebAppInfo';
import FullscreenManager from './components/FullscreenManager';
import DetailedDiagnostics from './components/DetailedDiagnostics';
import ScreenshotHelper from './components/ScreenshotHelper';
import FullscreenControls from './components/FullscreenControls';
import FullscreenButton from './components/FullscreenButton';
import FullscreenTest from './components/FullscreenTest';
import LogsCopy from './components/LogsCopy';
import { LogsProvider, useLogs } from './contexts/LogsContext';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram WebApp
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        ready: () => void;
        expand: () => void;
        close: () => void;
        MainButton: {
          text: string;
          color: string;
          textColor: string;
          isVisible: boolean;
          isActive: boolean;
          isProgressVisible: boolean;
          setText: (text: string) => void;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
          enable: () => void;
          disable: () => void;
          showProgress: (leaveActive?: boolean) => void;
          hideProgress: () => void;
        };
        BackButton: {
          isVisible: boolean;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
        };
        HapticFeedback: {
          impactOccurred: (style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft') => void;
          notificationOccurred: (type: 'error' | 'success' | 'warning') => void;
          selectionChanged: () => void;
        };
        CloudStorage: {
          getItem: (key: string) => Promise<string | null>;
          setItem: (key: string, value: string) => Promise<void>;
          getItems: (keys: string[]) => Promise<{ [key: string]: string | null }>;
          removeItem: (key: string) => Promise<void>;
          removeItems: (keys: string[]) => Promise<void>;
        };
        BiometricManager: {
          isInited: boolean;
          isSupported: boolean;
          isAvailable: boolean;
          isAccessRequested: boolean;
          isAccessGranted: boolean;
          init: () => Promise<void>;
          authenticate: () => Promise<boolean>;
          requestAccess: () => Promise<boolean>;
        };
        QRScanner: {
          isSupported: boolean;
          isAvailable: boolean;
          isInited: boolean;
          isOpened: boolean;
          init: () => Promise<void>;
          open: () => Promise<void>;
          close: () => void;
          onResult: (callback: (result: string) => void) => void;
          offResult: (callback: (result: string) => void) => void;
        };
        initData: string;
        initDataUnsafe: {
          query_id?: string;
          user?: {
            id: number;
            is_bot?: boolean;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
            is_premium?: boolean;
            added_to_attachment_menu?: boolean;
            allows_write_to_pm?: boolean;
            photo_url?: string;
          };
          receiver?: {
            id: number;
            is_bot?: boolean;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
            is_premium?: boolean;
            added_to_attachment_menu?: boolean;
            allows_write_to_pm?: boolean;
            photo_url?: string;
          };
          chat?: {
            id: number;
            type: 'group' | 'supergroup' | 'channel';
            title: string;
            username?: string;
            photo_url?: string;
          };
          chat_type?: 'sender' | 'private' | 'group' | 'supergroup' | 'channel';
          chat_instance?: string;
          start_param?: string;
          can_send_after?: number;
          auth_date: number;
          hash: string;
        };
        colorScheme: 'light' | 'dark';
        themeParams: {
          bg_color?: string;
          text_color?: string;
          hint_color?: string;
          link_color?: string;
          button_color?: string;
          button_text_color?: string;
          secondary_bg_color?: string;
        };
        isExpanded: boolean;
        viewportHeight: number;
        viewportStableHeight: number;
        headerColor: string;
        backgroundColor: string;
        isClosingConfirmationEnabled: boolean;
        platform: string;
        version: string;
        sendData: (data: string) => void;
        switchInlineQuery: (query: string, choose_chat_types?: string[]) => void;
        openLink: (url: string, options?: { try_instant_view?: boolean }) => void;
        openTelegramLink: (url: string) => void;
        openInvoice: (url: string, callback?: (status: string) => void) => void;
        showPopup: (params: { title?: string; message: string; buttons?: Array<{ id?: string; type?: 'default' | 'ok' | 'close' | 'cancel' | 'destructive'; text: string }> }, callback?: (buttonId: string) => void) => void;
        showAlert: (message: string, callback?: () => void) => void;
        showConfirm: (message: string, callback?: (confirmed: boolean) => void) => void;
        showScanQrPopup: (params: { text?: string }, callback?: (data: string) => void) => void;
        closeScanQrPopup: () => void;
        readTextFromClipboard: (callback?: (data: string) => void) => void;
        requestWriteAccess: (callback?: (access: boolean) => void) => void;
        requestContact: (callback?: (contact: { phone_number: string; first_name: string; last_name?: string; user_id?: number }) => void) => void;
        invokeCustomMethod: (method: string, params?: any) => Promise<any>;
        onEvent: (eventType: string, eventHandler: () => void) => void;
        offEvent: (eventType: string, eventHandler: () => void) => void;
        setHeaderColor: (color: string) => void;
        setBackgroundColor: (color: string) => void;
        enableClosingConfirmation: () => void;
        disableClosingConfirmation: () => void;
        isVersionAtLeast: (version: string) => boolean;
        getHeaderColor: () => string;
        getBackgroundColor: () => string;
        isFullscreen: boolean;
      };
    };
  }
}

const tg = window.Telegram?.WebApp;

type Page = 'main' | 'showcase' | 'chat' | 'referral' | 'profile' | 'analytics' | 'channel-analytics' | 'post-analytics' | 'telegram-integration' | 'post-tracking' | 'post-builder' | 'test-back' | 'fullscreen-test';

function AppContent() {
  const [currentPage, setCurrentPage] = useState<Page>('main');
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);
  const [webAppInfo, setWebAppInfo] = useState<any>(null);
  const [viewportHeight, setViewportHeight] = useState(0);
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  const [mainButtonClicked, setMainButtonClicked] = useState(false);
  const [backButtonClicked, setBackButtonClicked] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [initData, setInitData] = useState('');
  const [navigationHistory, setNavigationHistory] = useState<Page[]>(['main']);
  
  const { logs, addLog } = useLogs();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Mini App –≤ Telegram
    const checkTelegramMiniApp = () => {
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Telegram Mini App
      const hasTelegram = !!window.Telegram;
      const hasWebApp = !!window.Telegram?.WebApp;
      const webApp = window.Telegram?.WebApp;
      const hasReady = typeof webApp?.ready === 'function';
      const hasExpand = typeof webApp?.expand === 'function';
      const hasPlatform = !!webApp?.platform;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const userAgent = navigator.userAgent;
      const isTelegramUserAgent = userAgent.includes('Telegram') || 
                                 userAgent.includes('tgWebApp') ||
                                 userAgent.includes('TelegramWebApp');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
      const urlParams = new URLSearchParams(window.location.search);
      const hasTgWebAppData = urlParams.has('tgWebAppData');
      const hasTgWebAppVersion = urlParams.has('tgWebAppVersion');
      const hasTgWebAppPlatform = urlParams.has('tgWebAppPlatform');
      
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Mini App:', {
        hasTelegram,
        hasWebApp,
        hasReady,
        hasExpand,
        hasPlatform,
        platform: webApp?.platform,
        isTelegramUserAgent,
        hasTgWebAppData,
        hasTgWebAppVersion,
        hasTgWebAppPlatform,
        userAgent: userAgent.substring(0, 100) + '...'
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –≤ URL, –Ω–æ API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      if (hasTgWebAppData && hasTgWebAppVersion && !hasTelegram) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram, –Ω–æ API –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ñ–¥–µ–º...');
        return; // –í—ã—Ö–æ–¥–∏–º –∏ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
      }
      
      const isMiniApp = hasTelegram && hasWebApp && hasReady && hasExpand && hasPlatform;
      
      if (isMiniApp) {
        console.log('üöÄ Telegram Mini App –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
        console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', webApp.platform);
        console.log('üîß –í–µ—Ä—Å–∏—è:', webApp.version);
        console.log('üé® –¢–µ–º–∞:', webApp.colorScheme);
        
        setIsTelegramWebApp(true);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
          initializeWebApp();
        }, 100);
      } else {
        console.log('‚ö†Ô∏è Telegram Mini App –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
        setIsTelegramWebApp(false);
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        setViewportHeight(window.innerHeight);
        setTheme('light');
      }
    };

    const initializeWebApp = () => {
      console.log('üîß initializeWebApp –≤—ã–∑–≤–∞–Ω–∞');
      console.log('üîß window.Telegram:', !!window.Telegram);
      console.log('üîß window.Telegram.WebApp:', !!window.Telegram?.WebApp);
      
      if (!window.Telegram?.WebApp) {
        console.log('‚ùå WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º');
        return;
      }
      
      const webApp = window.Telegram.WebApp;
      console.log('üîß WebApp –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
      
      try {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
        
        // –ì–æ—Ç–æ–≤–∏–º WebApp (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
        webApp.ready();
        
        // –ù–ï —Ä–∞—Å—à–∏—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç
        // webApp.expand();
        setIsExpanded(webApp.isExpanded);
        
        // –ü—Ä–æ–±—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (Bot API 8.0+)
        if (webApp.isVersionAtLeast && webApp.isVersionAtLeast('8.0')) {
          try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            if (document.documentElement.requestFullscreen) {
              document.documentElement.requestFullscreen().then(() => {
                console.log('üñºÔ∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!');
              }).catch((error) => {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:', error);
              });
            }
          } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
          }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É viewport
        setViewportHeight(webApp.viewportHeight);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
        setTheme(webApp.colorScheme);
        setInitData(webApp.initData);
        
        // –°–∫—Ä—ã–≤–∞–µ–º MainButton - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
        webApp.MainButton.hide();
        
        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram BackButton API - –æ–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        webApp.enableClosingConfirmation();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        webApp.setHeaderColor('#2B2D42');
        webApp.setBackgroundColor('#1A1B26');
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebApp
        const info = {
          platform: webApp.platform,
          colorScheme: webApp.colorScheme,
          themeParams: webApp.themeParams,
          initData: webApp.initData,
          initDataUnsafe: webApp.initDataUnsafe,
          version: webApp.version,
          isExpanded: webApp.isExpanded,
          viewportHeight: webApp.viewportHeight,
          viewportStableHeight: webApp.viewportStableHeight,
          headerColor: webApp.headerColor,
          backgroundColor: webApp.backgroundColor,
          isClosingConfirmationEnabled: webApp.isClosingConfirmationEnabled
        };
        
        setWebAppInfo(info);
        
        console.log('üì± WebApp –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', info);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        webApp.onEvent('viewportChanged', () => {
          addLog('üì± Viewport –∏–∑–º–µ–Ω–∏–ª—Å—è: ' + webApp.viewportHeight + ', isExpanded: ' + webApp.isExpanded);
          setViewportHeight(webApp.viewportHeight);
          setIsExpanded(webApp.isExpanded);
        });
        
        webApp.onEvent('themeChanged', () => {
          addLog('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ' + webApp.colorScheme);
          setTheme(webApp.colorScheme);
        });
        
        // –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (Bot API 8.0+)
        webApp.onEvent('fullscreenChanged', () => {
          addLog('üñºÔ∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–∏–ª—Å—è: ' + webApp.isFullscreen);
        });
        
        webApp.onEvent('activated', () => {
          addLog('‚úÖ WebApp –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        });
        
        webApp.onEvent('deactivated', () => {
          addLog('‚è∏Ô∏è WebApp –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
        (window as any).handleGoBack = () => {
          goBack();
        };
        
        console.log('‚úÖ Telegram WebApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
        setIsTelegramWebApp(false);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const runDiagnosticsWithRetry = () => {
      let attempts = 0;
      const maxAttempts = 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      
      const attemptCheck = () => {
        attempts++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ #${attempts}/${maxAttempts}...`);
        
        const result = checkTelegramMiniApp();
        
        // –ï—Å–ª–∏ API –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        const urlParams = new URLSearchParams(window.location.search);
        const hasTgWebAppData = urlParams.has('tgWebAppData');
        const hasTgWebAppVersion = urlParams.has('tgWebAppVersion');
        
        if (hasTgWebAppData && hasTgWebAppVersion && !window.Telegram && attempts < maxAttempts) {
          setTimeout(attemptCheck, 1000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        } else if (attempts < maxAttempts) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Telegram –∏–ª–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
          setTimeout(() => {
            console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
            checkTelegramMiniApp();
          }, 2000);
        }
      };
      
      attemptCheck();
    };
    
    runDiagnosticsWithRetry();
  }, [currentPage]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigateTo = (page: Page) => {
      // –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (currentPage === page) {
        console.log('üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', page);
        return;
      }

      console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', page);
      console.log('üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', currentPage);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏—é
      setNavigationHistory(prev => {
        const newHistory = [...prev, page];
        console.log('üìö –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', newHistory);
        return newHistory;
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setCurrentPage(page);

      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º MainButton - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
        webApp.MainButton.hide();
      }
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }, 100);
    };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
  const goBack = () => {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', currentPage);
    console.log('üìö –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', navigationHistory);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (currentPage === 'main') {
      console.log('üè† –£–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('–í—ã —É–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      }
      return;
    }

    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    if (navigationHistory.length > 1) {
      const newHistory = navigationHistory.slice(0, -1);
      const previousPage = newHistory[newHistory.length - 1];
      
      console.log('‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', previousPage);
      console.log('üìö –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:', newHistory);
      
      setCurrentPage(previousPage);
      setNavigationHistory(newHistory);
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }, 100);
    } else {
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      console.log('üè† –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
      setCurrentPage('main');
      setNavigationHistory(['main']);
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }, 100);
    }
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'main':
        return (
          <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
            {/* Animated background elements */}
            <div className="absolute inset-0 overflow-hidden">
              <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
              <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
              <div className="absolute top-40 left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
            <FullscreenButton />

            <div className="relative z-10 p-4 sm:p-6">
              {/* Header */}
              <div className="text-center mb-8 fade-in">
                <div className="inline-flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 bg-gradient-to-br from-purple-400 to-pink-400 rounded-2xl mb-4 shadow-2xl">
                  <span className="text-2xl sm:text-3xl">üöÄ</span>
                </div>
                <h1 className="text-3xl sm:text-5xl font-bold text-white mb-2 sm:mb-4 drop-shadow-2xl">
                  Telegram Mini App
                </h1>
                <p className="text-lg sm:text-xl text-white/80 drop-shadow-lg max-w-2xl mx-auto">
                  –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                </p>
              </div>

              {/* Main Menu Grid */}
              <div className="max-w-4xl mx-auto">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  {/* Analytics Card */}
                  <div 
                    onClick={() => navigateTo('analytics')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üìä</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                      </p>
                    </div>
                  </div>

                  {/* Showcase Card */}
                  <div 
                    onClick={() => navigateTo('showcase')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-purple-500/20 to-pink-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üíé</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–í–∏—Ç—Ä–∏–Ω–∞ –∫–µ–π—Å–æ–≤</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –õ—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                      </p>
                    </div>
                  </div>

                  {/* Chat Card */}
                  <div 
                    onClick={() => navigateTo('chat')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-green-500/20 to-teal-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-teal-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üí¨</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–î–µ–º–æ-—á–∞—Ç</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç
                      </p>
                    </div>
                  </div>

                  {/* Profile Card */}
                  <div 
                    onClick={() => navigateTo('profile')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-orange-500/20 to-red-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-red-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üë§</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ü—Ä–æ—Ñ–∏–ª—å</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                      </p>
                    </div>
                  </div>

                  {/* Post Builder Card */}
                  <div 
                    onClick={() => navigateTo('post-builder')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/20 to-teal-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-emerald-400 to-teal-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üìù</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ü–æ—Å—Ç + –∫–Ω–æ–ø–∫–∞</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
                      </p>
                    </div>
                  </div>

                                      {/* Channel Analytics Card */}
                    <div
                      onClick={() => navigateTo('channel-analytics')}
                      className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                    >
                      <div className="absolute inset-0 bg-gradient-to-br from-indigo-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      <div className="relative z-10">
                        <div className="flex items-center justify-between mb-4">
                          <div className="w-12 h-12 bg-gradient-to-br from-indigo-400 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                            <span className="text-xl">üìà</span>
                          </div>
                          <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                            </svg>
                          </div>
                        </div>
                        <h3 className="text-xl font-bold text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</h3>
                        <p className="text-white/70 text-sm leading-relaxed">
                          –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤
                        </p>
                      </div>
                    </div>

                    {/* Fullscreen Test Card */}
                    <div
                      onClick={() => navigateTo('fullscreen-test')}
                      className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                    >
                      <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/20 to-orange-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      <div className="relative z-10">
                        <div className="flex items-center justify-between mb-4">
                          <div className="w-12 h-12 bg-gradient-to-br from-yellow-400 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                            <span className="text-xl">üñºÔ∏è</span>
                          </div>
                          <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                            <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                            </svg>
                          </div>
                        </div>
                        <h3 className="text-xl font-bold text-white mb-2">–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞</h3>
                        <p className="text-white/70 text-sm leading-relaxed">
                          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ WebApp API
                        </p>
                      </div>
                    </div>
                </div>

                {/* Quick Stats */}
                <div className="mt-8 grid grid-cols-2 sm:grid-cols-4 gap-4">
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <div className="text-2xl font-bold text-white">2.5K</div>
                    <div className="text-white/60 text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                  </div>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <div className="text-2xl font-bold text-white">156</div>
                    <div className="text-white/60 text-sm">–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</div>
                  </div>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <div className="text-2xl font-bold text-white">98%</div>
                    <div className="text-white/60 text-sm">–¢–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</div>
                  </div>
                  <div className="bg-white/5 backdrop-blur-sm rounded-xl p-4 border border-white/10">
                    <div className="text-2xl font-bold text-white">24/7</div>
                    <div className="text-white/60 text-sm">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      case 'showcase':
        return <Showcase />;
      case 'chat':
        return <DemoChat />;
      case 'referral':
        return <ReferralSystem />;
      case 'profile':
        return <UserProfile />;
      case 'analytics':
        return <AnalyticsFeedback />;
      case 'channel-analytics':
        return <ChannelAnalytics />;
      case 'post-analytics':
        return <PostAnalytics />;
      case 'telegram-integration':
        return <TelegramIntegration />;
      case 'post-tracking':
        return <PostTracking />;
      case 'post-builder':
        return <PostBuilder />;
      case 'test-back':
        return <TestBackButton />;
      case 'fullscreen-test':
        return <FullscreenTest />;
      default:
        return (
          <div 
            className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 text-white p-4"
            style={{ 
              minHeight: viewportHeight ? `${viewportHeight}px` : '100vh',
              background: theme === 'dark' ? 'linear-gradient(135deg, #1a1b26 0%, #2b2d42 100%)' : 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%)'
            }}
          >
            <div className="p-4 sm:p-6 md:p-8 rounded-xl shadow-xl bg-white bg-opacity-10 backdrop-blur-md w-full max-w-md">
              <h1 className="text-2xl sm:text-3xl font-bold mb-2 sm:mb-4 text-center">
                üöÄ Telegram Mini App
              </h1>
              <p className="text-sm sm:text-base md:text-lg mb-4 sm:mb-6 text-center">
                –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤–∏—Ç—Ä–∏–Ω–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ Telegram Mini Apps API
              </p>
              
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebApp */}
              <WebAppInfo
                isTelegramWebApp={isTelegramWebApp}
                webAppInfo={webAppInfo}
                theme={theme}
                viewportHeight={viewportHeight}
                isExpanded={isExpanded}
              />
              
              {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º */}
              <FullscreenManager isTelegramWebApp={isTelegramWebApp} />
              
              {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ */}
              <DetailedDiagnostics />
              
              {/* –ü–æ–º–æ—â—å —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º */}
              <ScreenshotHelper />
              
              {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º */}
              <FullscreenControls />
              
              <div className="space-y-3 sm:space-y-4">
                <button
                  onClick={() => navigateTo('showcase')}
                  className="w-full btn-primary py-3 sm:py-4 px-4 sm:px-6 text-base sm:text-lg"
                >
                  üéØ –í–∏—Ç—Ä–∏–Ω–∞ –∫–µ–π—Å–æ–≤
                </button>
                
                <button
                  onClick={() => navigateTo('chat')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üí¨ –î–µ–º–æ-—á–∞—Ç
                </button>
                
                <button
                  onClick={() => navigateTo('channel-analytics')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                </button>
                
                <button
                  onClick={() => navigateTo('post-analytics')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üìù –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
                </button>
                
                <button
                  onClick={() => navigateTo('post-tracking')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üîó –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
                </button>
                
                <button
                  onClick={() => navigateTo('referral')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                </button>
                
                <button
                  onClick={() => navigateTo('profile')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                </button>
                
                <button
                  onClick={() => navigateTo('analytics')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ & –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                </button>
                
                <button
                  onClick={() => navigateTo('telegram-integration')}
                  className="w-full btn-primary py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base"
                >
                  ‚öôÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
                </button>
                

              </div>
              

              

            </div>
          </div>
        );
    }
  };

  return (
    <div className="app-container">
      {renderPage()}
    </div>
  );
}

function App() {
  return (
    <LogsProvider>
      <AppContent />
    </LogsProvider>
  );
}

export default App; 