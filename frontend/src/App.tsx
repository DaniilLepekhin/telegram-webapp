import React, { useEffect, useState } from 'react';
import Showcase from './components/Showcase';
import DemoChat from './components/DemoChat';
import ReferralSystem from './components/ReferralSystem';
import UserProfile from './components/UserProfile';
import AnalyticsFeedback from './components/AnalyticsFeedback';
import ChannelAnalytics from './components/ChannelAnalytics';
import PostAnalytics from './components/PostAnalytics';
import TelegramIntegration from './components/TelegramIntegration';
import PostTracking from './components/PostTracking';
import PostBuilder from './components/PostBuilder';
import FullscreenButton from './components/FullscreenButton';
import BackButton from './components/BackButton';
import { LogsProvider, useLogs } from './contexts/LogsContext';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
const LogsDisplay: React.FC = () => {
  const { logs } = useLogs();
  
  const copyLogs = () => {
    const logsText = logs.join('\n');
    navigator.clipboard.writeText(logsText).then(() => {
      console.log('üìã –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    });
  };

  if (logs.length === 0) return null;

  return (
    <div className="fixed bottom-4 left-4 right-4 bg-black/90 backdrop-blur-xl border border-white/20 rounded-lg p-4 z-[10000] max-h-48 overflow-y-auto">
      <div className="flex justify-between items-center mb-2">
        <h3 className="text-white text-sm font-bold">–õ–æ–≥–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</h3>
        <button
          onClick={copyLogs}
          className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-xs transition-colors"
        >
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </div>
      <div className="text-green-400 text-xs font-mono whitespace-pre-wrap">
        {logs.join('\n')}
      </div>
    </div>
  );
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram WebApp
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        ready: () => void;
        expand: () => void;
        close: () => void;
        isExpanded: boolean;
        viewportHeight: number;
        colorScheme: 'light' | 'dark';
        initData: string;
        platform: string;
        version: string;
        isVersionAtLeast: (version: string) => boolean;
        MainButton: {
          text: string;
          color: string;
          textColor: string;
          isVisible: boolean;
          isActive: boolean;
          isProgressVisible: boolean;
          setText: (text: string) => void;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
          enable: () => void;
          disable: () => void;
          showProgress: (leaveActive?: boolean) => void;
          hideProgress: () => void;
        };
        BackButton: {
          isVisible: boolean;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
          show: () => void;
          hide: () => void;
        };
        onEvent: (eventType: string, eventHandler: () => void) => void;
        offEvent: (eventType: string, eventHandler: () => void) => void;
        showAlert: (message: string) => void;
        showConfirm: (message: string, callback: (confirmed: boolean) => void) => void;
        enableClosingConfirmation: () => void;
        disableClosingConfirmation: () => void;
        HapticFeedback: {
          impactOccurred: (style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft') => void;
          notificationOccurred: (type: 'error' | 'success' | 'warning') => void;
          selectionChanged: () => void;
        };
        setHeaderColor: (color: string) => void;
        setBackgroundColor: (color: string) => void;
      };
    };
  }
}

type Page = 'main' | 'analytics' | 'showcase' | 'demo-chat' | 'referral' | 'user-profile' | 'feedback' | 'post-analytics' | 'telegram-integration' | 'post-tracking' | 'post-builder' | 'test-back-button';

function AppContent() {
  const [currentPage, setCurrentPage] = useState<Page>('main');
  const [navigationHistory, setNavigationHistory] = useState<Page[]>(['main']);
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  
  const { logs, addLog } = useLogs();

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –≤–µ—Ä—Ö—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const scrollToTop = () => {
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'instant'
      });
      console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', currentPage, '–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    };

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    scrollToTop();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const timeoutId = setTimeout(scrollToTop, 100);
    
    return () => clearTimeout(timeoutId);
  }, [currentPage]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    const initializeTelegramWebApp = () => {
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
        
        // –ì–æ—Ç–æ–≤–∏–º WebApp
        webApp.ready();
        
        // –ù–ï —Ä–∞—Å—à–∏—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ
        // webApp.expand();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setIsTelegramWebApp(true);
        setIsExpanded(webApp.isExpanded);
        
        // –°–∫—Ä—ã–≤–∞–µ–º MainButton
        webApp.MainButton.hide();
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
        const handleViewportChange = () => {
          setIsExpanded(webApp.isExpanded);
          console.log('üì± Viewport –∏–∑–º–µ–Ω–µ–Ω, isExpanded:', webApp.isExpanded);
        };
        
        webApp.onEvent('viewportChanged', handleViewportChange);
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        (window as any).handleGoBack = () => {
          goBack();
        };
        
        console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        return () => {
          webApp.offEvent('viewportChanged', handleViewportChange);
        };
      } else {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
        setIsTelegramWebApp(false);
      }
    };

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebApp
    if (window.Telegram?.WebApp) {
      initializeTelegramWebApp();
    } else {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ Telegram
      const checkTelegram = () => {
        if (window.Telegram?.WebApp) {
          initializeTelegramWebApp();
        } else {
          setTimeout(checkTelegram, 100);
        }
      };
      checkTelegram();
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigateTo = (page: Page) => {
    if (currentPage === page) {
      const message = `üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page}`;
      console.log(message);
      addLog(message);
      return;
    }

    const message = `üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${page} —Å ${currentPage}`;
    console.log(message);
    addLog(message);
    
    console.log('üìö –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è:', navigationHistory);
    addLog(`üìö –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è: [${navigationHistory.join(', ')}]`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const newHistory = [...navigationHistory, page];
    console.log('üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è:', newHistory);
    addLog(`üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è: [${newHistory.join(', ')}]`);
    
    setNavigationHistory(newHistory);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    setCurrentPage(page);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    setTimeout(() => {
      window.scrollTo({
        top: 0,
        left: 0,
        behavior: 'instant'
      });
    }, 50);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
  const goBack = () => {
    const message = `üîÑ –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${currentPage}`;
    console.log(message);
    addLog(message);
    
    console.log('üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', navigationHistory);
    addLog(`üìö –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: [${navigationHistory.join(', ')}]`);
    
    console.log('üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { currentPage, navigationHistoryLength: navigationHistory.length });
    addLog(`üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞=${currentPage}, –∏—Å—Ç–æ—Ä–∏—è=${navigationHistory.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

    // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤–æ–æ–±—â–µ
    if (currentPage === 'main') {
      const message = 'üè† –£–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è';
      console.log(message);
      addLog(message);
      return;
    }

    if (navigationHistory.length > 1) {
      const newHistory = navigationHistory.slice(0, -1);
      const previousPage = newHistory[newHistory.length - 1];
      
      const message = `‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫: ${previousPage}`;
      console.log(message);
      addLog(message);
      
      console.log('üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è:', newHistory);
      addLog(`üìù –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è: [${newHistory.join(', ')}]`);
      
      setNavigationHistory(newHistory);
      setCurrentPage(previousPage);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        window.scrollTo({
          top: 0,
          left: 0,
          behavior: 'instant'
        });
      }, 50);
    } else {
      const message = 'üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞)';
      console.log(message);
      addLog(message);
      
      setCurrentPage('main');
      setNavigationHistory(['main']);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        window.scrollTo({
          top: 0,
          left: 0,
          behavior: 'instant'
        });
      }, 50);
    }
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'main':
        return (
          <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
            {/* Animated background elements */}
            <div className="absolute inset-0 overflow-hidden">
              <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
              <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
              <div className="absolute top-40 left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
            <FullscreenButton />

            <div className="relative z-10 p-4 sm:p-6">
              {/* Header */}
              <div className="text-center mb-8 fade-in">
                <div className="inline-flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 bg-gradient-to-br from-purple-400 to-pink-400 rounded-2xl mb-4 shadow-2xl">
                  <span className="text-2xl sm:text-3xl">üöÄ</span>
                </div>
                <h1 className="text-3xl sm:text-5xl font-bold text-white mb-2 sm:mb-4 drop-shadow-2xl">
                  Telegram Mini App
                </h1>
                <p className="text-lg sm:text-xl text-white/80 drop-shadow-lg max-w-2xl mx-auto">
                  –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                </p>
              </div>

              {/* Main Menu Grid */}
              <div className="max-w-4xl mx-auto">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                  {/* Analytics Card */}
                  <div 
                    onClick={() => navigateTo('analytics')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üìä</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                      </p>
                    </div>
                  </div>

                  {/* Showcase Card */}
                  <div 
                    onClick={() => navigateTo('showcase')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-green-500/20 to-teal-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üéØ</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–í–∏—Ç—Ä–∏–Ω–∞ –∫–µ–π—Å–æ–≤</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
                      </p>
                    </div>
                  </div>

                  {/* Demo Chat Card */}
                  <div 
                    onClick={() => navigateTo('demo-chat')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-orange-500/20 to-red-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üí¨</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–î–µ–º–æ —á–∞—Ç</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º
                      </p>
                    </div>
                  </div>

                  {/* User Profile Card */}
                  <div 
                    onClick={() => navigateTo('user-profile')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-purple-500/20 to-pink-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üë§</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ü—Ä–æ—Ñ–∏–ª—å</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                      </p>
                    </div>
                  </div>

                  {/* Analytics Feedback Card */}
                  <div 
                    onClick={() => navigateTo('feedback')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/20 to-blue-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-cyan-400 to-cyan-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üìà</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –æ—Ç–∑—ã–≤–æ–≤
                      </p>
                    </div>
                  </div>

                  {/* Post Builder Card */}
                  <div 
                    onClick={() => navigateTo('post-builder')}
                    className="group relative overflow-hidden bg-white/10 backdrop-blur-xl rounded-2xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl cursor-pointer"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/20 to-orange-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-xl flex items-center justify-center shadow-lg">
                          <span className="text-xl">üõ†Ô∏è</span>
                        </div>
                        <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center group-hover:bg-white/20 transition-colors">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">–ü–æ—Å—Ç + –∫–Ω–æ–ø–∫–∞</h3>
                      <p className="text-white/70 text-sm leading-relaxed">
                        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Quick Stats */}
              <div className="max-w-4xl mx-auto mt-8">
                <div className="glass-card p-6">
                  <h2 className="text-xl font-bold text-white mb-4 text-center">–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                  <div className="grid grid-cols-3 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-purple-400">2.4K</div>
                      <div className="text-sm text-white/70">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-400">98%</div>
                      <div className="text-sm text-white/70">–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-400">1.2M</div>
                      <div className="text-sm text-white/70">–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'analytics':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <ChannelAnalytics />
          </div>
        );

      case 'showcase':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <Showcase />
          </div>
        );

      case 'demo-chat':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <DemoChat />
          </div>
        );

      case 'referral':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <ReferralSystem />
          </div>
        );

      case 'user-profile':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <UserProfile />
          </div>
        );

      case 'feedback':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <AnalyticsFeedback />
          </div>
        );

      case 'post-analytics':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <PostAnalytics />
          </div>
        );

      case 'telegram-integration':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <TelegramIntegration />
          </div>
        );

      case 'post-tracking':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <PostTracking />
          </div>
        );

      case 'post-builder':
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <PostBuilder />
          </div>
        );

      default:
        return (
          <div>
            <BackButton onClick={goBack} />
            <FullscreenButton />
            <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
              <div className="text-center text-white">
                <h1 className="text-2xl font-bold mb-4">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                <button 
                  onClick={() => navigateTo('main')}
                  className="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg transition-colors"
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </button>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="app">
      {renderPage()}
      <LogsDisplay />
    </div>
  );
}

function App() {
  return (
    <LogsProvider>
      <AppContent />
    </LogsProvider>
  );
}

export default App; 