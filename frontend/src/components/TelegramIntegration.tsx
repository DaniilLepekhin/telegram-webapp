import React, { useState, useEffect } from 'react';

interface TelegramStats {
  channelId: string;
  channelName: string;
  subscribers: number;
  posts: TelegramPost[];
}

interface TelegramPost {
  id: number;
  text: string;
  views: number;
  forwards: number;
  replies: number;
  date: string;
}

const TelegramIntegration: React.FC = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [botToken, setBotToken] = useState('');
  const [channelUsername, setChannelUsername] = useState('');
  const [stats, setStats] = useState<TelegramStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const connectBot = async () => {
    if (!botToken || !channelUsername) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ username –∫–∞–Ω–∞–ª–∞');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
      const response = await fetch('/api/telegram/connect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          botToken,
          channelUsername
        })
      });

      if (response.ok) {
        setIsConnected(true);
        await fetchChannelStats();
      } else {
        setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + err);
    } finally {
      setLoading(false);
    }
  };

  const fetchChannelStats = async () => {
    if (!isConnected) return;

    setLoading(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const mockStats: TelegramStats = {
        channelId: '1',
        channelName: '@my_channel',
        subscribers: 15420,
        posts: [
          {
            id: 123,
            text: '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –≤ 3 —Ä–∞–∑–∞',
            views: 15420,
            forwards: 234,
            replies: 156,
            date: '2024-02-15'
          },
          {
            id: 124,
            text: '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –≤ –ø—Ä–æ–¥–∞–∂–µ!',
            views: 8920,
            forwards: 123,
            replies: 89,
            date: '2024-02-14'
          }
        ]
      };

      setStats(mockStats);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + err);
    } finally {
      setLoading(false);
    }
  };

  const syncWithTelegram = () => {
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.sendData(JSON.stringify({
        action: 'sync_telegram_stats',
        channelUsername,
        botToken: botToken ? '***' : 'not_set'
      }));
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram</h1>
          <p className="text-lg text-gray-600">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
        </div>

        {/* Connection Form */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞</h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ—Ç @BotFather)
              </label>
              <input
                type="password"
                value={botToken}
                onChange={(e) => setBotToken(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
              />
              <p className="text-xs text-gray-500 mt-1">
                –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
              </label>
              <input
                type="text"
                value={channelUsername}
                onChange={(e) => setChannelUsername(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                placeholder="my_channel"
              />
              <p className="text-xs text-gray-500 mt-1">
                –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
              </p>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                {error}
              </div>
            )}

            <div className="flex gap-4">
              <button
                onClick={connectBot}
                disabled={loading || !botToken || !channelUsername}
                className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {loading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞'}
              </button>
              
              {isConnected && (
                <button
                  onClick={syncWithTelegram}
                  className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
                >
                  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Connection Status */}
        {isConnected && (
          <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-8">
            ‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É @{channelUsername}
          </div>
        )}

        {/* Channel Stats */}
        {stats && (
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-6">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl">
                <div className="text-3xl font-bold mb-2">{stats.subscribers.toLocaleString()}</div>
                <div className="text-blue-100">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</div>
              </div>
              <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-xl">
                <div className="text-3xl font-bold mb-2">{stats.posts.length}</div>
                <div className="text-green-100">–ü–æ—Å—Ç–æ–≤</div>
              </div>
              <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl">
                <div className="text-3xl font-bold mb-2">
                  {Math.round(stats.posts.reduce((sum, post) => sum + post.views, 0) / stats.posts.length).toLocaleString()}
                </div>
                <div className="text-purple-100">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä</div>
              </div>
            </div>

            {/* Posts List */}
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã</h3>
              <div className="space-y-4">
                {stats.posts.map(post => (
                  <div key={post.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-semibold text-gray-800">
                        {post.text.length > 50 ? post.text.substring(0, 50) + '...' : post.text}
                      </h4>
                      <span className="text-sm text-gray-500">{post.date}</span>
                    </div>
                    <div className="flex space-x-4 text-sm">
                      <span className="text-blue-600">üëÅ {post.views.toLocaleString()}</span>
                      <span className="text-green-600">üì§ {post.forwards}</span>
                      <span className="text-purple-600">üí¨ {post.replies}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Instructions */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</h2>
          
          <div className="space-y-4">
            <div className="flex items-start space-x-3">
              <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">1</div>
              <div>
                <h4 className="font-semibold text-gray-800">–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞</h4>
                <p className="text-gray-600">–ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">2</div>
              <div>
                <h4 className="font-semibold text-gray-800">–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω</h4>
                <p className="text-gray-600">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª—ë—Ç @BotFather</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">3</div>
              <div>
                <h4 className="font-semibold text-gray-800">–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª</h4>
                <p className="text-gray-600">–°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <div className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold">4</div>
              <div>
                <h4 className="font-semibold text-gray-800">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤ WebApp</h4>
                <p className="text-gray-600">–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ username –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
              </div>
            </div>
          </div>

          <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <h4 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è –í–∞–∂–Ω–æ</h4>
            <p className="text-yellow-700 text-sm">
              –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. 
              –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TelegramIntegration; 