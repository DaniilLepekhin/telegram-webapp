import React, { useState, useEffect } from 'react';

interface TelegramChannel {
  id: number;
  title: string;
  username?: string;
  type: 'channel' | 'group' | 'supergroup';
  isAdmin: boolean;
  canInviteUsers: boolean;
  memberCount?: number;
}

interface ChannelDetectorProps {
  onChannelsDetected: (channels: TelegramChannel[]) => void;
  onChannelSelected: (channel: TelegramChannel) => void;
}

const ChannelDetector: React.FC<ChannelDetectorProps> = ({
  onChannelsDetected,
  onChannelSelected
}) => {
  const [channels, setChannels] = useState<TelegramChannel[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedChannel, setSelectedChannel] = useState<TelegramChannel | null>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [showLogs, setShowLogs] = useState(false);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [...prev, logMessage]);
    console.log(logMessage);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telegram Bot API
  const detectChannels = async () => {
    setLoading(true);
    setError(null);
    setLogs([]); // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏

    try {
      addLog('–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...');
      addLog(`window.Telegram: ${window.Telegram ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      addLog(`window.Telegram?.WebApp: ${window.Telegram?.WebApp ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ Telegram WebApp
      if (!window.Telegram?.WebApp) {
        addLog('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      addLog(`initDataUnsafe: ${JSON.stringify(window.Telegram.WebApp.initDataUnsafe)}`);
      addLog(`user: ${JSON.stringify(window.Telegram.WebApp.initDataUnsafe?.user)}`);
      
      if (!window.Telegram.WebApp.initDataUnsafe?.user) {
        addLog('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      }

      addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
      const response = await fetch('/api/telegram/get-channels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          initData: window.Telegram.WebApp.initData,
          user: window.Telegram.WebApp.initDataUnsafe?.user
        })
      });

      addLog(`–û—Ç–≤–µ—Ç –æ—Ç API: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤');
      }

      const data = await response.json();
      addLog(`–î–∞–Ω–Ω—ã–µ –æ—Ç API: ${JSON.stringify(data, null, 2)}`);

      if (data.success) {
        const detectedChannels = data.channels.filter((channel: TelegramChannel) =>
          channel.isAdmin && channel.canInviteUsers
        );

        addLog(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${JSON.stringify(detectedChannels, null, 2)}`);
        setChannels(detectedChannels);
        onChannelsDetected(detectedChannels);

        if (detectedChannels.length === 0) {
          setError('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤');
      }
    } catch (err) {
      addLog(`–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setChannels([]);
      onChannelsDetected([]);
    } finally {
      setLoading(false);
    }
  };

  const forceRefreshChannels = async () => {
    setLoading(true);
    setError(null);
    setLogs([]); // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏

    try {
      addLog('‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ –∫–µ—à–∞)...');
      addLog(`window.Telegram: ${window.Telegram ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      addLog(`window.Telegram?.WebApp: ${window.Telegram?.WebApp ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ Telegram WebApp
      if (!window.Telegram?.WebApp) {
        addLog('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      addLog(`initDataUnsafe: ${JSON.stringify(window.Telegram.WebApp.initDataUnsafe)}`);
      addLog(`user: ${JSON.stringify(window.Telegram.WebApp.initDataUnsafe?.user)}`);
      
      if (!window.Telegram.WebApp.initDataUnsafe?.user) {
        addLog('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      }

      addLog('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...');
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å —Ñ–ª–∞–≥–æ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const response = await fetch('/api/telegram/get-channels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          initData: window.Telegram.WebApp.initData,
          user: window.Telegram.WebApp.initDataUnsafe?.user,
          forceRefresh: true // –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        })
      });

      addLog(`üì° –û—Ç–≤–µ—Ç –æ—Ç API: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤');
      }

      const data = await response.json();
      addLog(`üìä –î–∞–Ω–Ω—ã–µ –æ—Ç API: ${JSON.stringify(data, null, 2)}`);

      if (data.success) {
        const detectedChannels = data.channels.filter((channel: TelegramChannel) =>
          channel.isAdmin && channel.canInviteUsers
        );

        addLog(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${JSON.stringify(detectedChannels, null, 2)}`);
        setChannels(detectedChannels);
        onChannelsDetected(detectedChannels);

        if (detectedChannels.length === 0) {
          setError('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤');
      }
    } catch (err) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleChannelSelect = (channel: TelegramChannel) => {
    setSelectedChannel(channel);
    onChannelSelected(channel);
  };

  const addBotToChannel = async (channel: TelegramChannel) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
      const response = await fetch('/api/telegram/add-bot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          channelId: channel.id,
          channelTitle: channel.title,
          initData: window.Telegram.WebApp.initData
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞');
      }

      const data = await response.json();

      if (data.success) {
        alert(`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª "${channel.title}"!`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', err);
      alert(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    detectChannels();
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-xl font-bold text-white">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤</h3>
          <p className="text-white/60 text-sm mt-1">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–º –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
          </p>
        </div>
        <button
          onClick={detectChannels}
          disabled={loading}
          className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-2 rounded-xl font-semibold hover:from-blue-600 hover:to-purple-600 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'üîç –ü–æ–∏—Å–∫...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
        <button
          onClick={() => {
            setLogs([]);
            detectChannels();
          }}
          className="bg-gradient-to-r from-green-500 to-blue-500 text-white px-4 py-2 rounded-xl font-semibold hover:from-green-600 hover:to-blue-600 transition-all duration-300 transform hover:scale-105 ml-2"
        >
          üîç –û—Ç–ª–∞–¥–∫–∞
        </button>
      </div>

      {/* Loading State */}
      {loading && (
        <div className="bg-white/10 backdrop-blur-xl rounded-2xl p-8 border border-white/20 text-center">
          <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 ">
            <span className="text-2xl">üîç</span>
          </div>
          <h3 className="text-lg font-semibold text-white mb-2">–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...</h3>
          <p className="text-white/60">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö</p>
        </div>
      )}

      {/* Debug Logs - Always show when logs exist */}
      {/* Debug Logs */}
      {showLogs && (
        <div className="bg-gray-900/50 backdrop-blur-xl rounded-2xl p-6 border border-gray-700/50">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-lg font-semibold text-white">üîç –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏</h4>
            <div className="flex space-x-2">
              <button
                onClick={() => {
                  const logText = logs.join('\n');
                  navigator.clipboard.writeText(logText);
                  alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }}
                className="bg-blue-500/20 text-blue-300 px-3 py-1 rounded-lg hover:bg-blue-500/30 transition-colors text-sm"
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => setShowLogs(false)}
                className="bg-red-500/20 text-red-300 px-3 py-1 rounded-lg hover:bg-red-500/30 transition-colors text-sm"
              >
                ‚ùå –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
          <div className="bg-black/50 rounded-lg p-4 max-h-60 overflow-y-auto">
            <div className="space-y-1 text-xs font-mono">
              {logs.length === 0 ? (
                <div className="text-yellow-400">–ù–µ—Ç –ª–æ–≥–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤.</div>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="text-green-400">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      )}

      {/* No Channels State */}
      {!loading && !error && channels.length === 0 && (
        <div className="bg-yellow-500/20 backdrop-blur-xl rounded-2xl p-6 border border-yellow-400/30">
          <div className="flex items-start space-x-3">
            <span className="text-yellow-400 text-xl">üîç</span>
            <div>
              <h4 className="text-white font-medium mb-2">–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
              <p className="text-white/60 text-sm mb-4">
                –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
              </p>
              <div className="space-y-2 text-sm text-white/80">
                <p>‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
                <p>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ</p>
                <p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞</p>
              </div>
              <button
                onClick={detectChannels}
                className="mt-4 bg-yellow-500/20 text-yellow-300 px-4 py-2 rounded-lg hover:bg-yellow-500/30 transition-colors text-sm"
              >
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Error State */}
      {error && !loading && (
        <div className="bg-red-500/20 backdrop-blur-xl rounded-2xl p-6 border border-red-400/30">
          <div className="flex items-start space-x-3">
            <span className="text-red-400 text-xl">‚ö†Ô∏è</span>
            <div>
              <h4 className="text-white font-medium mb-2">–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤</h4>
              <p className="text-white/60 text-sm">{error}</p>
              <button
                onClick={detectChannels}
                className="mt-3 bg-red-500/20 text-red-300 px-4 py-2 rounded-lg hover:bg-red-500/30 transition-colors text-sm"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Channels List */}
      {channels.length > 0 && !loading && (
        <div className="space-y-4">
          <div className="flex justify-between items-center mb-4">
            <h4 className="text-lg font-semibold text-white">
              –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels.length}
            </h4>
            <div className="flex space-x-2">
              <button
                onClick={detectChannels}
                className="bg-blue-500/20 text-blue-300 px-3 py-2 rounded-lg hover:bg-blue-500/30 transition-colors text-sm"
                title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"
              >
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
              </button>
              <button
                onClick={forceRefreshChannels}
                className="bg-red-500/20 text-red-300 px-3 py-2 rounded-lg hover:bg-red-500/30 transition-colors text-sm"
                title="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–±–µ–∑ –∫–µ—à–∞)"
              >
                ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
              </button>
              <button
                onClick={() => setShowLogs(!showLogs)}
                className="bg-yellow-500/20 text-yellow-300 px-3 py-2 rounded-lg hover:bg-yellow-500/30 transition-colors text-sm"
                title="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏"
              >
                üìã –õ–æ–≥–∏
              </button>
            </div>
          </div>

          {channels.map((channel) => (
            <div
              key={channel.id}
              className={`bg-white/10 backdrop-blur-xl rounded-2xl p-6 border transition-all duration-300 ${
                selectedChannel?.id === channel.id
                  ? 'border-purple-400 bg-purple-500/10'
                  : 'border-white/20 hover:bg-white/15'
              }`}
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-600 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">
                        {channel.type === 'channel' ? 'üì¢' : 'üë•'}
                      </span>
                    </div>
                    <div>
                      <h5 className="text-white font-semibold">{channel.title}</h5>
                      {channel.username && (
                        <p className="text-white/60 text-sm">@{channel.username}</p>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center space-x-4 text-sm">
                    <span className="text-white/60">
                      –¢–∏–ø: {channel.type === 'channel' ? '–ö–∞–Ω–∞–ª' : '–ì—Ä—É–ø–ø–∞'}
                    </span>
                    {channel.memberCount && (
                      <span className="text-white/60">
                        –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.memberCount.toLocaleString()}
                      </span>
                    )}
                    <span className="text-green-400">‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => handleChannelSelect(channel)}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      selectedChannel?.id === channel.id
                        ? 'bg-purple-500 text-white'
                        : 'bg-white/10 text-white hover:bg-white/20'
                    }`}
                  >
                    –í—ã–±—Ä–∞—Ç—å
                  </button>
                  <button
                    onClick={() => addBotToChannel(channel)}
                    className="px-4 py-2 bg-green-500/20 text-green-300 rounded-lg hover:bg-green-500/30 transition-colors"
                    title="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª"
                  >
                    ü§ñ
                  </button>
                </div>
              </div>

              {/* Bot Status */}
              <div className="pt-4 border-t border-white/10">
                <div className="flex items-center justify-between">
                  <span className="text-white/60 text-sm">–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</span>
                  <span className="text-yellow-400 text-sm">–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* No Channels Found */}
      {channels.length === 0 && !loading && !error && (
        <div className="bg-white/10 backdrop-blur-xl rounded-2xl p-8 border border-white/20 text-center">
          <div className="w-16 h-16 bg-white/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl">üì¢</span>
          </div>
          <h3 className="text-lg font-semibold text-white mb-2">–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p className="text-white/60 mb-4">
            –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          </p>
          <div className="space-y-2 text-sm text-white/60">
            <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</p>
            <ul className="list-disc list-inside space-y-1">
              <li>–ë—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞</li>
              <li>–ò–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
              <li>–ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª</li>
            </ul>
          </div>
        </div>
      )}

      {/* Instructions */}
      <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-xl rounded-2xl p-6 border border-blue-400/30">
        <h4 className="text-lg font-semibold text-white mb-4">üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h4>
        <div className="space-y-3 text-sm text-white/80">
          <div className="flex items-start space-x-3">
            <span className="text-blue-400">1.</span>
            <div>
              <div className="text-white font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</div>
              <div className="text-white/60">–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
            </div>
          </div>
          <div className="flex items-start space-x-3">
            <span className="text-purple-400">2.</span>
            <div>
              <div className="text-white font-medium">–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞</div>
              <div className="text-white/60">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</div>
            </div>
          </div>
          <div className="flex items-start space-x-3">
            <span className="text-green-400">3.</span>
            <div>
              <div className="text-white font-medium">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</div>
              <div className="text-white/60">–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChannelDetector;