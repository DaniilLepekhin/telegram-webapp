import React, { useState, useEffect } from 'react';

interface FullscreenButtonProps {
  onLog?: (message: string) => void;
}

const FullscreenButton: React.FC<FullscreenButtonProps> = ({ onLog }) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    const logMessage = 'üîç FullscreenButton useEffect - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
    console.log(logMessage);
    onLog?.(logMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp API
    if (window.Telegram?.WebApp) {
      const webApp = window.Telegram.WebApp;
      
      const logs = [
        'üì± Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:',
        `  - webApp.isExpanded: ${webApp.isExpanded}`,
        `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
        `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`,
        `  - webApp.platform: ${webApp.platform}`,
        `  - webApp.version: ${webApp.version}`,
        `  - webApp.colorScheme: ${webApp.colorScheme}`,
        `  - webApp.themeParams: ${JSON.stringify(webApp.themeParams)}`
      ];
      
      logs.forEach(log => {
        console.log(log);
        onLog?.(log);
      });
      
      setIsExpanded(webApp.isExpanded);
    } else {
      const logMessage = '‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      console.log(logMessage);
      onLog?.(logMessage);
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleViewportChange = () => {
      const logMessage = 'üîÑ FullscreenButton viewportChanged event';
      console.log(logMessage);
      onLog?.(logMessage);
      
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        const logs = [
          `  - webApp.isExpanded: ${webApp.isExpanded}`,
          `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
          `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`
        ];
        
        logs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        setIsExpanded(webApp.isExpanded);
      }
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleFullscreenChange = () => {
      const isFullscreenNow = !!document.fullscreenElement;
      const logMessage = `üñ•Ô∏è Browser fullscreen change: ${isFullscreenNow}`;
      console.log(logMessage);
      onLog?.(logMessage);
      setIsFullscreen(isFullscreenNow);
    };

    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.onEvent('viewportChanged', handleViewportChange);
      const viewportLogMessage = '‚úÖ viewportChanged listener –¥–æ–±–∞–≤–ª–µ–Ω';
      console.log(viewportLogMessage);
      onLog?.(viewportLogMessage);
    }

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    const fullscreenLogMessage = '‚úÖ fullscreenchange listener –¥–æ–±–∞–≤–ª–µ–Ω';
    console.log(fullscreenLogMessage);
    onLog?.(fullscreenLogMessage);

    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.offEvent('viewportChanged', handleViewportChange);
        const viewportRemoveLogMessage = 'üßπ viewportChanged listener —É–¥–∞–ª–µ–Ω';
        console.log(viewportRemoveLogMessage);
        onLog?.(viewportRemoveLogMessage);
      }
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
      const fullscreenRemoveLogMessage = 'üßπ fullscreenchange listener —É–¥–∞–ª–µ–Ω';
      console.log(fullscreenRemoveLogMessage);
      onLog?.(fullscreenRemoveLogMessage);
    };
  }, []);

  const toggleFullscreen = () => {
    const logs = [
      'üîò FullscreenButton toggleFullscreen –≤—ã–∑–≤–∞–Ω–∞',
      `  - isExpanded state: ${isExpanded}`,
      `  - isFullscreen state: ${isFullscreen}`
    ];
    
    logs.forEach(log => {
      console.log(log);
      onLog?.(log);
    });
    
    try {
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        
        const webAppLogs = [
          'üì± Telegram WebApp —Å–æ—Å—Ç–æ—è–Ω–∏–µ:',
          `  - webApp.isExpanded: ${webApp.isExpanded}`,
          `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
          `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`,
          `  - webApp.platform: ${webApp.platform}`,
          `  - webApp.version: ${webApp.version}`
        ];
        
        webAppLogs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        if (!webApp.isExpanded) {
          // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
          const expandLogs = [
            'üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º webApp.expand()',
            '‚úÖ webApp.expand() –≤—ã–ø–æ–ª–Ω–µ–Ω'
          ];
          
          expandLogs.forEach(log => {
            console.log(log);
            onLog?.(log);
          });
          
          webApp.expand();
        } else {
          // –í Telegram Mini Apps –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram
          const alreadyExpandedLog = 'üì± Mini App —É–∂–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram –¥–ª—è –≤—ã—Ö–æ–¥–∞.';
          console.log(alreadyExpandedLog);
          onLog?.(alreadyExpandedLog);
          
          // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —ç—Ç–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // webApp.showAlert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        }
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        const fallbackLogs = [
          'üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π fallback',
          `  - document.fullscreenElement: ${document.fullscreenElement}`
        ];
        
        fallbackLogs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        if (!document.fullscreenElement) {
          const requestLog = 'üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º document.documentElement.requestFullscreen()';
          console.log(requestLog);
          onLog?.(requestLog);
          document.documentElement.requestFullscreen();
        } else {
          const exitLog = 'üì± –í—ã–∑—ã–≤–∞–µ–º document.exitFullscreen()';
          console.log(exitLog);
          onLog?.(exitLog);
          document.exitFullscreen();
        }
      }
    } catch (error) {
      const errorLog = `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: ${error}`;
      console.error(errorLog);
      onLog?.(errorLog);
    }
  };

  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!window.Telegram?.WebApp) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getButtonPosition = () => {
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    return "fixed bottom-6 right-6 z-[9999]";
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):
    // if (isExpanded) {
    //   // –í –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ Telegram - –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    //   // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    //   return "fixed top-24 right-6 z-[9999]";
    // } else {
    //   // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    //   return "fixed top-6 right-6 z-[9999]";
    // }
  };

  return (
    <button
      onClick={toggleFullscreen}
      className={`${getButtonPosition()} w-12 h-12 bg-white/95 backdrop-blur-xl border-2 border-white/80 rounded-full shadow-2xl shadow-black/20 hover:shadow-2xl hover:shadow-black/30 transition-all duration-300 transform hover:scale-110 group`}
      aria-label={isExpanded ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
    >
      <div className="flex items-center justify-center w-full h-full">
        {isExpanded ? (
          <svg 
            className="w-5 h-5 text-gray-800 group-hover:text-purple-600 transition-colors duration-300" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2.5} 
              d="M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v4.5M9 15H4.5M9 15l-5.25 5.25M15 9h4.5M15 9V4.5M15 9l5.25-5.25M15 15h4.5M15 15v4.5m0-4.5l5.25 5.25" 
            />
          </svg>
        ) : (
          <svg 
            className="w-5 h-5 text-gray-800 group-hover:text-purple-600 transition-colors duration-300" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2.5} 
              d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0l5.25 5.25M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15m-11.25 5.25h4.5m-4.5 0v-4.5m0 4.5L9 15" 
            />
          </svg>
        )}
      </div>
      
      {/* Hover effect */}
      <div className="absolute inset-0 rounded-full bg-gradient-to-r from-purple-400/20 to-pink-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      
      {/* Glow effect */}
      <div className="absolute inset-0 rounded-full bg-gradient-to-r from-purple-400/10 to-pink-400/10 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    </button>
  );
};

export default FullscreenButton; 