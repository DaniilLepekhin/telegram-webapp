import React, { useState, useEffect } from 'react';

interface FullscreenButtonProps {
  onLog?: (message: string) => void;
}

const FullscreenButton: React.FC<FullscreenButtonProps> = ({ onLog }) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    const logMessage = 'üîç FullscreenButton useEffect - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
    console.log(logMessage);
    onLog?.(logMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp API
    if (window.Telegram?.WebApp) {
      const webApp = window.Telegram.WebApp;
      
      const logs = [
        'üì± Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:',
        `  - webApp.isExpanded: ${webApp.isExpanded}`,
        `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
        `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`,
        `  - webApp.platform: ${webApp.platform}`,
        `  - webApp.version: ${webApp.version}`,
        `  - webApp.colorScheme: ${webApp.colorScheme}`,
        `  - webApp.themeParams: ${JSON.stringify(webApp.themeParams)}`
      ];
      
      logs.forEach(log => {
        console.log(log);
        onLog?.(log);
      });
      
      setIsExpanded(webApp.isExpanded);
    } else {
      const logMessage = '‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      console.log(logMessage);
      onLog?.(logMessage);
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleViewportChange = () => {
      const logMessage = 'üîÑ FullscreenButton viewportChanged event';
      console.log(logMessage);
      onLog?.(logMessage);
      
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        const logs = [
          `  - webApp.isExpanded: ${webApp.isExpanded}`,
          `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
          `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`
        ];
        
        logs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        setIsExpanded(webApp.isExpanded);
      }
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleFullscreenChange = () => {
      const isFullscreenNow = !!document.fullscreenElement;
      const logMessage = `üñ•Ô∏è Browser fullscreen change: ${isFullscreenNow}`;
      console.log(logMessage);
      onLog?.(logMessage);
      setIsFullscreen(isFullscreenNow);
    };

    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.onEvent('viewportChanged', handleViewportChange);
      const viewportLogMessage = '‚úÖ viewportChanged listener –¥–æ–±–∞–≤–ª–µ–Ω';
      console.log(viewportLogMessage);
      onLog?.(viewportLogMessage);
    }

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    const fullscreenLogMessage = '‚úÖ fullscreenchange listener –¥–æ–±–∞–≤–ª–µ–Ω';
    console.log(fullscreenLogMessage);
    onLog?.(fullscreenLogMessage);

    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.offEvent('viewportChanged', handleViewportChange);
        const viewportRemoveLogMessage = 'üßπ viewportChanged listener —É–¥–∞–ª–µ–Ω';
        console.log(viewportRemoveLogMessage);
        onLog?.(viewportRemoveLogMessage);
      }
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
      const fullscreenRemoveLogMessage = 'üßπ fullscreenchange listener —É–¥–∞–ª–µ–Ω';
      console.log(fullscreenRemoveLogMessage);
      onLog?.(fullscreenRemoveLogMessage);
    };
  }, []);

  const toggleFullscreen = () => {
    const logs = [
      'üîò FullscreenButton toggleFullscreen –≤—ã–∑–≤–∞–Ω–∞',
      `  - isExpanded state: ${isExpanded}`,
      `  - isFullscreen state: ${isFullscreen}`
    ];
    
    logs.forEach(log => {
      console.log(log);
      onLog?.(log);
    });
    
    try {
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        
        const webAppLogs = [
          'üì± Telegram WebApp —Å–æ—Å—Ç–æ—è–Ω–∏–µ:',
          `  - webApp.isExpanded: ${webApp.isExpanded}`,
          `  - webApp.viewportHeight: ${webApp.viewportHeight}`,
          `  - webApp.viewportStableHeight: ${webApp.viewportStableHeight}`,
          `  - webApp.platform: ${webApp.platform}`,
          `  - webApp.version: ${webApp.version}`
        ];
        
        webAppLogs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        if (!webApp.isExpanded) {
          // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
          const expandLogs = [
            'üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º webApp.expand()',
            '‚úÖ webApp.expand() –≤—ã–ø–æ–ª–Ω–µ–Ω'
          ];
          
          expandLogs.forEach(log => {
            console.log(log);
            onLog?.(log);
          });
          
          webApp.expand();
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
          const exitLog = 'üì± Mini App –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã—Ö–æ–¥–∞.';
          console.log(exitLog);
          onLog?.(exitLog);
          
          webApp.showConfirm(
            '–•–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞?',
            (confirmed: boolean) => {
              if (confirmed) {
                const confirmLog = '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞';
                console.log(confirmLog);
                onLog?.(confirmLog);
                
                webApp.showAlert('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
              } else {
                const cancelLog = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞';
                console.log(cancelLog);
                onLog?.(cancelLog);
              }
            }
          );
        }
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        const fallbackLogs = [
          'üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π fallback',
          `  - document.fullscreenElement: ${document.fullscreenElement}`
        ];
        
        fallbackLogs.forEach(log => {
          console.log(log);
          onLog?.(log);
        });
        
        if (!document.fullscreenElement) {
          const requestLog = 'üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º document.documentElement.requestFullscreen()';
          console.log(requestLog);
          onLog?.(requestLog);
          document.documentElement.requestFullscreen();
        } else {
          const exitLog = 'üì± –í—ã–∑—ã–≤–∞–µ–º document.exitFullscreen()';
          console.log(exitLog);
          onLog?.(exitLog);
          document.exitFullscreen();
        }
      }
    } catch (error) {
      const errorLog = `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: ${error}`;
      console.error(errorLog);
      onLog?.(errorLog);
    }
  };

  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!window.Telegram?.WebApp) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getButtonPosition = () => {
    // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return "fixed bottom-6 right-6 z-[9999]";
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  // –ï—Å–ª–∏ viewportHeight === viewportStableHeight, —Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
  // –ï—Å–ª–∏ viewportHeight > viewportStableHeight, —Ç–æ —ç—Ç–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  const webApp = window.Telegram.WebApp;
  const isActuallyExpanded = webApp.viewportHeight > webApp.viewportStableHeight;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
  if (isActuallyExpanded !== isExpanded) {
    console.log(`üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isExpanded=${isExpanded} -> ${isActuallyExpanded}`);
    onLog?.(`üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isExpanded=${isExpanded} -> ${isActuallyExpanded}`);
    setIsExpanded(isActuallyExpanded);
  }

  return (
    <div className={`${getButtonPosition()} flex flex-col items-center gap-2`}>
      {/* –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
      <button
        onClick={toggleFullscreen}
        className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 backdrop-blur-xl border-2 border-white/80 rounded-2xl shadow-2xl shadow-black/20 hover:shadow-2xl hover:shadow-black/30 transition-all duration-300 transform hover:scale-110 group"
        aria-label={isExpanded ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
        title={isExpanded ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
      >
        <div className="flex items-center justify-center w-full h-full">
          {isExpanded ? (
            <svg 
              className="w-8 h-8 text-white group-hover:text-yellow-200 transition-colors duration-300" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2.5} 
                d="M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v4.5M9 15H4.5M9 15l-5.25 5.25M15 9h4.5M15 9V4.5M15 9l5.25-5.25M15 15h4.5M15 15v4.5m0-4.5l5.25 5.25" 
              />
            </svg>
          ) : (
            <svg 
              className="w-8 h-8 text-white group-hover:text-yellow-200 transition-colors duration-300" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2.5} 
                d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0l5.25 5.25M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15m-11.25 5.25h4.5m-4.5 0v-4.5m0 4.5L9 15" 
              />
            </svg>
          )}
        </div>
        
        {/* Hover effect */}
        <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-yellow-400/20 to-orange-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        {/* Glow effect */}
        <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-yellow-400/10 to-orange-400/10 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </button>

             {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
       <div className="bg-black/90 backdrop-blur-xl border border-white/20 rounded-xl p-3 text-white text-xs max-w-48">
         <div className="font-bold mb-2">üîç –û—Ç–ª–∞–¥–∫–∞ Fullscreen</div>
         <div className="space-y-1">
           <div>üì± isExpanded: {isExpanded ? '‚úÖ' : '‚ùå'}</div>
           <div>üñ•Ô∏è isFullscreen: {isFullscreen ? '‚úÖ' : '‚ùå'}</div>
           <div>üîç isActuallyExpanded: {isActuallyExpanded ? '‚úÖ' : '‚ùå'}</div>
           {window.Telegram?.WebApp && (
             <>
               <div>üìè viewportHeight: {window.Telegram.WebApp.viewportHeight}</div>
               <div>üìê viewportStableHeight: {window.Telegram.WebApp.viewportStableHeight}</div>
               <div>üåê platform: {window.Telegram.WebApp.platform}</div>
               <div>üì± webApp.isExpanded: {window.Telegram.WebApp.isExpanded ? '‚úÖ' : '‚ùå'}</div>
             </>
           )}
         </div>
        
                 {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
         <button
           onClick={() => {
             const debugInfo = [
               `üîç Fullscreen Debug Info - ${new Date().toLocaleTimeString()}`,
               `üì± isExpanded: ${isExpanded}`,
               `üñ•Ô∏è isFullscreen: ${isFullscreen}`,
               `üîç isActuallyExpanded: ${isActuallyExpanded}`,
               `üìè viewportHeight: ${window.Telegram?.WebApp?.viewportHeight || 'N/A'}`,
               `üìê viewportStableHeight: ${window.Telegram?.WebApp?.viewportStableHeight || 'N/A'}`,
               `üåê platform: ${window.Telegram?.WebApp?.platform || 'N/A'}`,
               `üì± webApp.isExpanded: ${window.Telegram?.WebApp?.isExpanded || 'N/A'}`,
               `üîß webApp.version: ${window.Telegram?.WebApp?.version || 'N/A'}`,
               `üé® webApp.colorScheme: ${window.Telegram?.WebApp?.colorScheme || 'N/A'}`
             ].join('\n');
            
            navigator.clipboard.writeText(debugInfo).then(() => {
              onLog?.('üìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
            }).catch(() => {
              onLog?.('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            });
          }}
          className="mt-2 w-full px-2 py-1 bg-green-500/80 text-white text-xs rounded-lg hover:bg-green-500 transition-colors"
        >
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É
        </button>
      </div>
    </div>
  );
};

export default FullscreenButton; 