import React, { useState, useEffect } from 'react';

interface FullscreenButtonProps {
  onLog?: (message: string) => void;
}

const FullscreenButton: React.FC<FullscreenButtonProps> = ({ onLog }) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [fullscreenSupported, setFullscreenSupported] = useState(false);

  useEffect(() => {
    const logMessage = 'üîç FullscreenButton useEffect - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
    console.log(logMessage);
    onLog?.(logMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const checkFullscreenSupport = () => {
      const supported = !!(
        document.fullscreenEnabled ||
        (document as any).webkitFullscreenEnabled ||
        (document as any).mozFullScreenEnabled ||
        (document as any).msFullscreenEnabled
      );
      setFullscreenSupported(supported);
      
      const supportLog = `üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Fullscreen API: ${supported ? '‚úÖ' : '‚ùå'}`;
      console.log(supportLog);
      onLog?.(supportLog);
      
      // –í Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º webApp.isExpanded –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
      if (window.Telegram?.WebApp) {
        const webApp = window.Telegram.WebApp;
        setIsFullscreen(webApp.isExpanded);
        
        const telegramStateLog = `üì± Telegram isExpanded: ${webApp.isExpanded ? '‚úÖ' : '‚ùå'}`;
        console.log(telegramStateLog);
        onLog?.(telegramStateLog);
      } else {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º document.fullscreenElement
        const fullscreenElement = 
          document.fullscreenElement ||
          (document as any).webkitFullscreenElement ||
          (document as any).mozFullScreenElement ||
          (document as any).msFullscreenElement;
        
        setIsFullscreen(!!fullscreenElement);
        
        const browserStateLog = `üñ•Ô∏è –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π Fullscreen: ${!!fullscreenElement ? '‚úÖ' : '‚ùå'}`;
        console.log(browserStateLog);
        onLog?.(browserStateLog);
      }
    };

    checkFullscreenSupport();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const handleFullscreenChange = () => {
      if (window.Telegram?.WebApp) {
        // –í Telegram —Å–ª—É—à–∞–µ–º viewportChanged
        const webApp = window.Telegram.WebApp;
        const newState = webApp.isExpanded;
        setIsFullscreen(newState);
        
        const changeLog = `üîÑ Telegram isExpanded –∏–∑–º–µ–Ω–∏–ª—Å—è: ${newState ? '‚úÖ' : '‚ùå'}`;
        console.log(changeLog);
        onLog?.(changeLog);
      } else {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ —Å–ª—É—à–∞–µ–º fullscreenchange
        const fullscreenElement = 
          document.fullscreenElement ||
          (document as any).webkitFullscreenElement ||
          (document as any).mozFullScreenElement ||
          (document as any).msFullscreenElement;
        
        const newState = !!fullscreenElement;
        setIsFullscreen(newState);
        
        const changeLog = `üîÑ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π Fullscreen –∏–∑–º–µ–Ω–∏–ª—Å—è: ${newState ? '‚úÖ' : '‚ùå'}`;
        console.log(changeLog);
        onLog?.(changeLog);
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.onEvent('viewportChanged', handleFullscreenChange);
      const telegramListenerLog = '‚úÖ Telegram viewportChanged listener –¥–æ–±–∞–≤–ª–µ–Ω';
      console.log(telegramListenerLog);
      onLog?.(telegramListenerLog);
    } else {
      document.addEventListener('fullscreenchange', handleFullscreenChange);
      document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
      document.addEventListener('mozfullscreenchange', handleFullscreenChange);
      document.addEventListener('MSFullscreenChange', handleFullscreenChange);
      
      const browserListenersLog = '‚úÖ –°–ª—É—à–∞—Ç–µ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Fullscreen –¥–æ–±–∞–≤–ª–µ–Ω—ã';
      console.log(browserListenersLog);
      onLog?.(browserListenersLog);
    }

    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.offEvent('viewportChanged', handleFullscreenChange);
        const telegramCleanupLog = 'üßπ Telegram viewportChanged listener —É–¥–∞–ª–µ–Ω';
        console.log(telegramCleanupLog);
        onLog?.(telegramCleanupLog);
      } else {
        document.removeEventListener('fullscreenchange', handleFullscreenChange);
        document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);
        document.removeEventListener('mozfullscreenchange', handleFullscreenChange);
        document.removeEventListener('MSFullscreenChange', handleFullscreenChange);
        
        const browserCleanupLog = 'üßπ –°–ª—É—à–∞—Ç–µ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Fullscreen —É–¥–∞–ª–µ–Ω—ã';
        console.log(browserCleanupLog);
        onLog?.(browserCleanupLog);
      }
    };
  }, [onLog]);

  const requestFullscreen = async () => {
    try {
      const element = document.documentElement;
      
      const requestLog = 'üñºÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º...';
      console.log(requestLog);
      onLog?.(requestLog);
      
      if (element.requestFullscreen) {
        await element.requestFullscreen();
      } else if ((element as any).webkitRequestFullscreen) {
        await (element as any).webkitRequestFullscreen();
      } else if ((element as any).mozRequestFullScreen) {
        await (element as any).mozRequestFullScreen();
      } else if ((element as any).msRequestFullscreen) {
        await (element as any).msRequestFullscreen();
      }
      
      const successLog = '‚úÖ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!';
      console.log(successLog);
      onLog?.(successLog);
    } catch (error) {
      const errorLog = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: ${error}`;
      console.error(errorLog);
      onLog?.(errorLog);
    }
  };

  const exitFullscreen = async () => {
    try {
      const exitLog = 'üñºÔ∏è –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...';
      console.log(exitLog);
      onLog?.(exitLog);
      
      if (document.exitFullscreen) {
        await document.exitFullscreen();
      } else if ((document as any).webkitExitFullscreen) {
        await (document as any).webkitExitFullscreen();
      } else if ((document as any).mozCancelFullScreen) {
        await (document as any).mozCancelFullScreen();
      } else if ((document as any).msExitFullscreen) {
        await (document as any).msExitFullscreen();
      }
      
      const successLog = '‚úÖ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω!';
      console.log(successLog);
      onLog?.(successLog);
    } catch (error) {
      const errorLog = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: ${error}`;
      console.error(errorLog);
      onLog?.(errorLog);
    }
  };

  const toggleFullscreen = () => {
    const toggleLog = `üîò FullscreenButton toggleFullscreen –≤—ã–∑–≤–∞–Ω–∞, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${isFullscreen ? '‚úÖ' : '‚ùå'}`;
    console.log(toggleLog);
    onLog?.(toggleLog);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram
    if (window.Telegram?.WebApp) {
      const webApp = window.Telegram.WebApp;
      const telegramLog = 'üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API';
      console.log(telegramLog);
      onLog?.(telegramLog);
      
      if (!webApp.isExpanded) {
        // –†–∞—Å—à–∏—Ä—è–µ–º –≤ Telegram
        const expandLog = 'üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º webApp.expand()';
        console.log(expandLog);
        onLog?.(expandLog);
        webApp.expand();
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ Telegram
        const exitLog = 'üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ Telegram';
        console.log(exitLog);
        onLog?.(exitLog);
        webApp.showAlert('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π Fullscreen API
      const browserLog = 'üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π Fullscreen API';
      console.log(browserLog);
      onLog?.(browserLog);
      
      if (isFullscreen) {
        exitFullscreen();
      } else {
        requestFullscreen();
      }
    }
  };

  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
  // if (!fullscreenSupported) {
  //   return null;
  // }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏
  const getButtonPosition = () => {
    return "fixed bottom-6 right-6 z-[9999]";
  };

  return (
    <div className={`${getButtonPosition()} flex flex-col items-center gap-2`}>
      {/* –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
      <button
        onClick={toggleFullscreen}
        className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 backdrop-blur-xl border-2 border-white/80 rounded-2xl shadow-2xl shadow-black/20 hover:shadow-2xl hover:shadow-black/30 transition-all duration-300 transform hover:scale-110 group"
        aria-label={isFullscreen ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
        title={isFullscreen ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
      >
        <div className="flex items-center justify-center w-full h-full">
          {(() => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            let shouldShowExitIcon = isFullscreen;
            
            // –í Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º webApp.isExpanded –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
            if (window.Telegram?.WebApp) {
              shouldShowExitIcon = window.Telegram.WebApp.isExpanded;
            }
            
            return shouldShowExitIcon ? (
              <svg 
                className="w-8 h-8 text-white group-hover:text-yellow-200 transition-colors duration-300" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2.5} 
                  d="M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v4.5M9 15H4.5M9 15l-5.25 5.25M15 9h4.5M15 9V4.5M15 9l5.25-5.25M15 15h4.5M15 15v4.5m0-4.5l5.25 5.25" 
                />
              </svg>
            ) : (
              <svg 
                className="w-8 h-8 text-white group-hover:text-yellow-200 transition-colors duration-300" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2.5} 
                  d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0l5.25 5.25M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15m-11.25 5.25h4.5m-4.5 0v-4.5m0 4.5L9 15" 
                />
              </svg>
            );
          })()}
        </div>
        
        {/* Hover effect */}
        <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-yellow-400/20 to-orange-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        {/* Glow effect */}
        <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-yellow-400/10 to-orange-400/10 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </button>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-black/90 backdrop-blur-xl border border-white/20 rounded-xl p-3 text-white text-xs max-w-48">
        <div className="font-bold mb-2">üîç –û—Ç–ª–∞–¥–∫–∞ Fullscreen</div>
        <div className="space-y-1">
          <div>üñ•Ô∏è isFullscreen: {isFullscreen ? '‚úÖ' : '‚ùå'}</div>
          <div>üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {fullscreenSupported ? '‚úÖ' : '‚ùå'}</div>
          <div>üì± Telegram WebApp: {window.Telegram?.WebApp ? '‚úÖ' : '‚ùå'}</div>
          <div>üì± Telegram isExpanded: {window.Telegram?.WebApp?.isExpanded ? '‚úÖ' : '‚ùå'}</div>
          <div>üìè viewportHeight: {window.Telegram?.WebApp?.viewportHeight || 'N/A'}</div>
          <div>üìê viewportStableHeight: {window.Telegram?.WebApp?.viewportStableHeight || 'N/A'}</div>
          <div>üåê platform: {window.Telegram?.WebApp?.platform || 'N/A'}</div>
          <div>üîß document.fullscreenEnabled: {document.fullscreenEnabled ? '‚úÖ' : '‚ùå'}</div>
          <div>üîß webkitFullscreenEnabled: {(document as any).webkitFullscreenEnabled ? '‚úÖ' : '‚ùå'}</div>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
        <button
          onClick={() => {
            const debugInfo = [
              `üîç Fullscreen Debug Info - ${new Date().toLocaleTimeString()}`,
              `üñ•Ô∏è isFullscreen: ${isFullscreen}`,
              `üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: ${fullscreenSupported}`,
              `üì± Telegram WebApp: ${window.Telegram?.WebApp ? '‚úÖ' : '‚ùå'}`,
              `üì± Telegram isExpanded: ${window.Telegram?.WebApp?.isExpanded ? '‚úÖ' : '‚ùå'}`,
              `üìè viewportHeight: ${window.Telegram?.WebApp?.viewportHeight || 'N/A'}`,
              `üìê viewportStableHeight: ${window.Telegram?.WebApp?.viewportStableHeight || 'N/A'}`,
              `üåê platform: ${window.Telegram?.WebApp?.platform || 'N/A'}`,
              `üîß webApp.version: ${window.Telegram?.WebApp?.version || 'N/A'}`,
              `üé® webApp.colorScheme: ${window.Telegram?.WebApp?.colorScheme || 'N/A'}`,
              `üîß document.fullscreenEnabled: ${document.fullscreenEnabled ? '‚úÖ' : '‚ùå'}`,
              `üîß webkitFullscreenEnabled: ${(document as any).webkitFullscreenEnabled ? '‚úÖ' : '‚ùå'}`
            ].join('\n');
            
            navigator.clipboard.writeText(debugInfo).then(() => {
              onLog?.('üìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
            }).catch(() => {
              onLog?.('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            });
          }}
          className="mt-2 w-full px-2 py-1 bg-green-500/80 text-white text-xs rounded-lg hover:bg-green-500 transition-colors"
        >
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É
        </button>
      </div>
    </div>
  );
};

export default FullscreenButton; 