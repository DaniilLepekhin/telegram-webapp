import { Pool } from 'pg';
import axios from 'axios';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  language_code?: string;
  is_premium?: boolean;
}

interface TelegramChat {
  id: number;
  title: string;
  username?: string;
  type: 'group' | 'supergroup' | 'channel';
  member_count?: number;
}

interface ChatMember {
  user: {
    id: number;
    first_name: string;
    username?: string;
  };
  status: 'creator' | 'administrator' | 'member' | 'left' | 'kicked';
  is_member?: boolean;
}

export class TelegramService {
  private pool: Pool;
  private botToken: string;

  constructor(pool: Pool, botToken: string) {
    this.pool = pool;
    this.botToken = botToken;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ initData
  async getUserFromInitData(initData: string): Promise<TelegramUser | null> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
      const params = new URLSearchParams(initData);
      const userStr = params.get('user');
      if (!userStr) return null;
      
      return JSON.parse(userStr);
    } catch (error) {
      console.error('Error parsing initData:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveOrUpdateUser(user: TelegramUser, sessionId?: string, userAgent?: string, ipAddress?: string): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.pool.query(
        `INSERT INTO app_users (telegram_user_id, first_name, last_name, username, photo_url, language_code, is_premium, last_seen_at, session_count)
         VALUES ($1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, 1)
         ON CONFLICT (telegram_user_id) 
         DO UPDATE SET 
           first_name = EXCLUDED.first_name,
           last_name = EXCLUDED.last_name,
           username = EXCLUDED.username,
           photo_url = EXCLUDED.photo_url,
           language_code = EXCLUDED.language_code,
           is_premium = EXCLUDED.is_premium,
           last_seen_at = CURRENT_TIMESTAMP,
           session_count = app_users.session_count + 1`,
        [user.id, user.first_name, user.last_name, user.username, user.photo_url, user.language_code, user.is_premium]
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å sessionId, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–µ—Å—Å–∏–∏
      if (sessionId) {
        await this.pool.query(
          `INSERT INTO user_sessions (user_id, session_id, init_data, user_agent, ip_address, started_at)
           VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)`,
          [user.id, sessionId, '', userAgent || '', ipAddress || null]
        );
      }

      console.log(`‚úÖ User saved/updated: ${user.first_name} (ID: ${user.id})`);
    } catch (error) {
      console.error(`Error saving user ${user.id}:`, error);
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async endUserSession(sessionId: string, durationSeconds: number, pagesVisited: any[] = [], actionsPerformed: any[] = []): Promise<void> {
    try {
      await this.pool.query(
        `UPDATE user_sessions 
         SET ended_at = CURRENT_TIMESTAMP,
             duration_seconds = $1,
             pages_visited = $2,
             actions_performed = $3
         WHERE session_id = $4`,
        [durationSeconds, JSON.stringify(pagesVisited), JSON.stringify(actionsPerformed), sessionId]
      );

      console.log(`‚úÖ Session ended: ${sessionId} (duration: ${durationSeconds}s)`);
    } catch (error) {
      console.error(`Error ending session ${sessionId}:`, error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveUserAnalytics(userId: number, actionType: string, actionData?: any, pageUrl?: string, sessionId?: string): Promise<void> {
    try {
      await this.pool.query(
        `INSERT INTO user_analytics (user_id, action_type, action_data, page_url, session_id)
         VALUES ($1, $2, $3, $4, $5)`,
        [userId, actionType, JSON.stringify(actionData || {}), pageUrl || '', sessionId || '']
      );
    } catch (error) {
      console.error(`Error saving analytics for user ${userId}:`, error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUserStats(): Promise<any> {
    try {
      const result = await this.pool.query(`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN last_seen_at > CURRENT_TIMESTAMP - INTERVAL '24 hours' THEN 1 END) as active_today,
          COUNT(CASE WHEN last_seen_at > CURRENT_TIMESTAMP - INTERVAL '7 days' THEN 1 END) as active_week,
          AVG(session_count) as avg_sessions_per_user,
          SUM(total_time_spent) as total_time_spent
        FROM app_users
      `);

      return result.rows[0];
    } catch (error) {
      console.error('Error getting user stats:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
  async checkUserStatus(chatId: number, userId: number): Promise<ChatMember | null> {
    try {
      const response = await axios.get(
        `https://api.telegram.org/bot${this.botToken}/getChatMember`,
        {
          params: {
            chat_id: chatId,
            user_id: userId
          }
        }
      );

      if (response.data.ok) {
        return response.data.result;
      }
      return null;
    } catch (error) {
      console.error(`Error checking user status for chat ${chatId}, user ${userId}:`, error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
  async getChatInfo(chatId: number): Promise<TelegramChat | null> {
    try {
      console.log(`üîç Getting chat info for: ${chatId}`);
      
      const response = await axios.get(
        `https://api.telegram.org/bot${this.botToken}/getChat`,
        {
          params: { chat_id: chatId }
        }
      );

      if (response.data.ok) {
        const chatInfo = response.data.result;
        console.log(`üìã Chat info received: ${chatInfo.title} (${chatInfo.type})`);
        
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      try {
        console.log(`üë• Getting member count for: ${chatId}`);
        const memberCountResponse = await axios.get(
          `https://api.telegram.org/bot${this.botToken}/getChatMemberCount`,
          {
            params: { chat_id: chatId }
          }
        );
        
        if (memberCountResponse.data.ok) {
          chatInfo.member_count = memberCountResponse.data.result;
          console.log(`‚úÖ Member count for ${chatInfo.title}: ${chatInfo.member_count}`);
        } else {
          console.log(`‚ùå Failed to get member count for ${chatId}: ${memberCountResponse.data.description}`);
          console.log(`üí° Reason: Bot might not have admin rights or channel is private`);
          
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
          try {
            const botMemberResponse = await axios.get(
              `https://api.telegram.org/bot${this.botToken}/getChatMember`,
              {
                params: { 
                  chat_id: chatId,
                  user_id: this.botToken.split(':')[0] // Bot ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
                }
              }
            );
            
            if (botMemberResponse.data.ok) {
              const botStatus = botMemberResponse.data.result.status;
              console.log(`ü§ñ Bot status in chat ${chatId}: ${botStatus}`);
              
              if (botStatus !== 'administrator') {
                console.log(`‚ö†Ô∏è Bot is not admin in chat ${chatId}, cannot get member count`);
                chatInfo.member_count = -1; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ –Ω–µ—Ç –ø—Ä–∞–≤
              }
            }
          } catch (statusError) {
            console.log(`‚ùå Could not check bot status:`, statusError.message);
          }
        }
      } catch (memberCountError) {
        console.log(`‚ö†Ô∏è Could not get member count for chat ${chatId}:`, memberCountError.message);
        if (memberCountError.response?.data?.description) {
          console.log(`üìã API Error: ${memberCountError.response.data.description}`);
        }
        chatInfo.member_count = -1; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏
      }
        
        return chatInfo;
      } else {
        console.log(`‚ùå Failed to get chat info for ${chatId}: ${response.data.description}`);
        return null;
      }
    } catch (error) {
      console.error(`‚ùå Error getting chat info for ${chatId}:`, error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –≤ –±–∞–∑—É
  async saveChatInfo(chatId: number, chatInfo: TelegramChat, botStatus: string = 'member', updateMemberCount: boolean = true): Promise<void> {
    try {
      if (updateMemberCount && chatInfo.member_count !== undefined && chatInfo.member_count !== null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await this.pool.query(
          `INSERT INTO telegram_chats (chat_id, chat_title, username, type, bot_status, member_count, last_member_update, updated_at)
           VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
           ON CONFLICT (chat_id) 
           DO UPDATE SET 
             chat_title = EXCLUDED.chat_title,
             username = EXCLUDED.username,
             type = EXCLUDED.type,
             bot_status = EXCLUDED.bot_status,
             member_count = EXCLUDED.member_count,
             last_member_update = CURRENT_TIMESTAMP,
             updated_at = CURRENT_TIMESTAMP`,
          [chatId, chatInfo.title, chatInfo.username, chatInfo.type, botStatus, chatInfo.member_count]
        );
        console.log(`üíæ Updated chat ${chatId} with member count: ${chatInfo.member_count}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await this.pool.query(
          `INSERT INTO telegram_chats (chat_id, chat_title, username, type, bot_status, updated_at)
           VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
           ON CONFLICT (chat_id) 
           DO UPDATE SET 
             chat_title = EXCLUDED.chat_title,
             username = EXCLUDED.username,
             type = EXCLUDED.type,
             bot_status = EXCLUDED.bot_status,
             updated_at = CURRENT_TIMESTAMP`,
          [chatId, chatInfo.title, chatInfo.username, chatInfo.type, botStatus]
        );
        console.log(`üíæ Updated chat ${chatId} without member count update`);
      }
    } catch (error) {
      console.error(`Error saving chat info for ${chatId}:`, error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
  async saveAdminStatus(chatId: number, userId: number, isAdmin: boolean, role?: string): Promise<void> {
    try {
      await this.pool.query(
        `INSERT INTO chat_admins (chat_id, user_id, is_admin, role, last_checked_at)
         VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
         ON CONFLICT (chat_id, user_id) 
         DO UPDATE SET 
           is_admin = EXCLUDED.is_admin,
           role = EXCLUDED.role,
           last_checked_at = CURRENT_TIMESTAMP`,
        [chatId, userId, isAdmin, role]
      );
    } catch (error) {
      console.error(`Error saving admin status for chat ${chatId}, user ${userId}:`, error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–°–ï–ì–î–ê –∏—â–µ—Ç –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
  async getUserChannels(userId: number, forceRefresh: boolean = false): Promise<TelegramChat[]> {
    try {
      console.log(`üîç Getting channels for user ${userId}, forceRefresh: ${forceRefresh}`);

      // –≠–¢–ê–ü 1: –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const cachedResult = await this.pool.query(
        `SELECT tc.*, 
                EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - COALESCE(tc.last_member_update, '1970-01-01'::timestamp))) / 3600 as hours_since_member_update
         FROM telegram_chats tc
         JOIN chat_admins ca ON tc.chat_id = ca.chat_id
         WHERE ca.user_id = $1 
           AND ca.is_admin = true 
           AND ca.last_checked_at > CURRENT_TIMESTAMP - INTERVAL '7 days'
           AND tc.bot_status != 'removed'
         ORDER BY tc.updated_at DESC`,
        [userId]
      );

      // –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      let shouldUpdateMemberCounts = false;
      let channelsNeedingMemberUpdate: any[] = [];
      
      if (forceRefresh) {
        // –ü—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        channelsNeedingMemberUpdate = cachedResult.rows.filter(row => 
          !row.last_member_update || row.hours_since_member_update >= 8
        );
        
        if (channelsNeedingMemberUpdate.length > 0) {
          shouldUpdateMemberCounts = true;
          console.log(`‚ö° Force refresh: ${channelsNeedingMemberUpdate.length} channels need member count update`);
        } else if (cachedResult.rows.length > 0) {
          const nextUpdateHours = Math.ceil(8 - Math.min(...cachedResult.rows.map(r => r.hours_since_member_update)));
          console.log(`‚è∞ Rate limit: Member counts updated recently. Next update in ${nextUpdateHours} hours`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          return cachedResult.rows.map(row => ({
            id: row.chat_id,
            title: row.chat_title,
            username: row.username,
            type: row.type,
            member_count: row.member_count,
            nextUpdateHours: nextUpdateHours
          }));
        }
      }

      // –≠–¢–ê–ü 3: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
      console.log(`üîÑ Checking for new channels and updates...`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
      const botAdminChats = await this.pool.query(
        `SELECT chat_id, chat_title, username, type, member_count 
         FROM telegram_chats 
         WHERE bot_status = 'administrator' 
           AND updated_at > CURRENT_TIMESTAMP - INTERVAL '30 days'
         ORDER BY updated_at DESC`
      );

      console.log(`üìã Found ${botAdminChats.rows.length} bot admin chats for refresh`);
      
      // –ü—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ
      if (forceRefresh) {
        console.log(`‚ö° Force refresh: updating all ${botAdminChats.rows.length} channels`);
        for (const chat of botAdminChats.rows) {
          console.log(`üîÑ Force updating chat: ${chat.chat_id} (${chat.chat_title})`);
          const updatedChatInfo = await this.getChatInfo(chat.chat_id);
          if (updatedChatInfo) {
            await this.saveChatInfo(chat.chat_id, updatedChatInfo, 'administrator');
            console.log(`üíæ Force updated chat: ${updatedChatInfo.title} (${updatedChatInfo.member_count} members)`);
          }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        const updatedChats = await this.pool.query(
          `SELECT chat_id, chat_title, username, type, member_count 
           FROM telegram_chats 
           WHERE bot_status = 'administrator' 
           ORDER BY updated_at DESC`
        );
        botAdminChats.rows = updatedChats.rows;
      }

      console.log(`üîç Found ${botAdminChats.rows.length} bot admin chats to check`);

      const userChannels: TelegramChat[] = [];

      for (const chat of botAdminChats.rows) {
        const memberStatus = await this.checkUserStatus(chat.chat_id, userId);
        
        if (memberStatus && (memberStatus.status === 'creator' || memberStatus.status === 'administrator')) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ
          await this.saveAdminStatus(chat.chat_id, userId, true, memberStatus.status);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
          console.log(`üîÑ Updating info for chat: ${chat.chat_id}`);
          const updatedChatInfo = await this.getChatInfo(chat.chat_id);
          if (updatedChatInfo) {
            await this.saveChatInfo(chat.chat_id, updatedChatInfo, 'administrator');
            console.log(`üíæ Saved updated chat info: ${updatedChatInfo.title} (${updatedChatInfo.member_count} members)`);
            
            userChannels.push({
              id: chat.chat_id,
              title: updatedChatInfo.title,
              username: updatedChatInfo.username,
              type: updatedChatInfo.type,
              member_count: updatedChatInfo.member_count
            });
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
            console.log(`üìã Using cached info for chat: ${chat.chat_title} (${chat.member_count} members)`);
            userChannels.push({
              id: chat.chat_id,
              title: chat.chat_title,
              username: chat.username,
              type: chat.type,
              member_count: chat.member_count
            });
          }
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
          await this.saveAdminStatus(chat.chat_id, userId, false, memberStatus?.status);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      console.log(`Found ${userChannels.length} channels for user ${userId} after fresh check`);
      return userChannels;

    } catch (error) {
      console.error(`Error getting user channels for ${userId}:`, error);
      return [];
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
  async handleBotAddedToChat(chatId: number): Promise<void> {
    try {
      const chatInfo = await this.getChatInfo(chatId);
      if (chatInfo) {
        await this.saveChatInfo(chatId, chatInfo, 'administrator');
        console.log(`Bot added to chat: ${chatInfo.title} (${chatId})`);
      }
    } catch (error) {
      console.error(`Error handling bot added to chat ${chatId}:`, error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞
  async handleBotRemovedFromChat(chatId: number): Promise<void> {
    try {
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.pool.query(
        `DELETE FROM telegram_chats WHERE chat_id = $1`,
        [chatId]
      );
      
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      await this.pool.query(
        `DELETE FROM chat_admins WHERE chat_id = $1`,
        [chatId]
      );
      
      console.log(`üóëÔ∏è Bot and channel completely removed from database: ${chatId}`);
    } catch (error) {
      console.error(`Error handling bot removed from chat ${chatId}:`, error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  async clearAdminCache(chatId: number): Promise<void> {
    try {
      await this.pool.query(
        `DELETE FROM chat_admins WHERE chat_id = $1`,
        [chatId]
      );
      console.log(`üßπ Cleared admin cache for chat: ${chatId}`);
    } catch (error) {
      console.error(`Error clearing admin cache for chat ${chatId}:`, error);
    }
  }

  // –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –∞–¥–º–∏–Ω–æ–≤
  async updateAdminCache(): Promise<void> {
    try {
      const staleAdmins = await this.pool.query(
        `SELECT ca.chat_id, ca.user_id 
         FROM chat_admins ca
         WHERE ca.last_checked_at < CURRENT_TIMESTAMP - INTERVAL '7 days'
         LIMIT 20`
      );

      for (const admin of staleAdmins.rows) {
        const memberStatus = await this.checkUserStatus(admin.chat_id, admin.user_id);
        
        if (memberStatus) {
          await this.saveAdminStatus(
            admin.chat_id, 
            admin.user_id, 
            memberStatus.status === 'creator' || memberStatus.status === 'administrator',
            memberStatus.status
          );
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      console.log(`Updated admin cache for ${staleAdmins.rows.length} records`);
    } catch (error) {
      console.error('Error updating admin cache:', error);
    }
  }
} 