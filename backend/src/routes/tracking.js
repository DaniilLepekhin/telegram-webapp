const express = require('express');
const crypto = require('crypto');
const QRCode = require('qrcode');
const geoip = require('geoip-lite');
const pool = require('../database');

const router = express.Router();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å—Å—ã–ª–∫–∏
function generateShortId(length = 8) {
  return crypto.randomBytes(length).toString('base64url').substring(0, length);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ User-Agent
function getDeviceType(userAgent) {
  if (!userAgent) return 'unknown';
  if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile|WPDesktop/i.test(userAgent)) {
    return /iPad/i.test(userAgent) ? 'tablet' : 'mobile';
  }
  return 'desktop';
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ User-Agent
function getBrowser(userAgent) {
  if (!userAgent) return 'unknown';
  if (userAgent.includes('Chrome')) return 'Chrome';
  if (userAgent.includes('Firefox')) return 'Firefox';
  if (userAgent.includes('Safari')) return 'Safari';
  if (userAgent.includes('Edge')) return 'Edge';
  if (userAgent.includes('Opera')) return 'Opera';
  return 'other';
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–° –ø–æ User-Agent
function getOS(userAgent) {
  if (!userAgent) return 'unknown';
  if (/Windows/i.test(userAgent)) return 'Windows';
  if (/Mac OS X/i.test(userAgent)) return 'macOS';
  if (/Linux/i.test(userAgent)) return 'Linux';
  if (/Android/i.test(userAgent)) return 'Android';
  if (/iOS|iPhone|iPad/i.test(userAgent)) return 'iOS';
  return 'other';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
function getRealIP(req) {
  return req.headers['x-forwarded-for'] || 
         req.headers['x-real-ip'] || 
         req.connection.remoteAddress || 
         req.socket.remoteAddress ||
         (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
         req.ip;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
router.post('/create-link', async (req, res) => {
  try {
    const {
      channelId,
      linkType,
      targetUrl,
      title,
      description,
      utmParams,
      enableABTest,
      abTestName,
      abGroups,
      enableExpiry,
      expiryDate,
      expiryClicks,
      generateQR
    } = req.body;

    console.log('üìù Creating tracking link:', { channelId, linkType, title });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!channelId || !linkType || !title) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: channelId, linkType, title'
      });
    }

    if (linkType === 'post' && !targetUrl) {
      return res.status(400).json({
        success: false,
        error: '–î–ª—è —Ç–∏–ø–∞ "post" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å targetUrl'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø
    const channelCheck = await pool.query(
      'SELECT chat_id, chat_title FROM telegram_chats WHERE chat_id = $1 AND bot_status = $2',
      [channelId, 'administrator']
    );

    if (channelCheck.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å—Å—ã–ª–∫–∏
    let linkId;
    let attempts = 0;
    do {
      linkId = generateShortId();
      const existingLink = await pool.query(
        'SELECT link_id FROM tracking_links WHERE link_id = $1',
        [linkId]
      );
      if (existingLink.rows.length === 0) break;
      attempts++;
    } while (attempts < 10);

    if (attempts >= 10) {
      return res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID'
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const finalTargetUrl = linkType === 'post' ? targetUrl : `https://t.me/${channelCheck.rows[0].chat_title}`;
    
    // –°–æ–∑–¥–∞–µ–º A/B —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let abExperimentId = null;
    if (enableABTest && abTestName && abGroups) {
      const groupsJson = {};
      abGroups.forEach(group => {
        groupsJson[group.name] = group.percentage;
      });

      const abExperiment = await pool.query(
        `INSERT INTO ab_experiments (name, description, creator_user_id, groups, status, start_date)
         VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
         RETURNING id`,
        [abTestName, `A/B —Ç–µ—Å—Ç –¥–ª—è —Å—Å—ã–ª–∫–∏: ${title}`, 1, JSON.stringify(groupsJson), 'running']
      );
      abExperimentId = abExperiment.rows[0].id;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—É—é —Å—Å—ã–ª–∫—É
    const insertResult = await pool.query(
      `INSERT INTO tracking_links (
        link_id, creator_user_id, channel_id, link_type, target_url, 
        title, description, ab_test_group, ab_test_name, 
        is_active, expires_at, auto_disable_after_clicks, 
        default_utm_params, created_at, updated_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
      RETURNING id`,
      [
        linkId,
        1, // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
        channelId,
        linkType,
        finalTargetUrl,
        title,
        description,
        enableABTest ? 'A' : null, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä—É–ø–ø–∞ A
        enableABTest ? abTestName : null,
        true,
        enableExpiry && expiryDate ? new Date(expiryDate) : null,
        enableExpiry && expiryClicks ? parseInt(expiryClicks) : null,
        JSON.stringify(utmParams || {})
      ]
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let qrCodeUrl = null;
    if (generateQR) {
      const trackingUrl = `https://app.daniillepekhin.com/track/${linkId}`;
      try {
        const qrCodeDataUrl = await QRCode.toDataURL(trackingUrl, {
          width: 256,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        });
        qrCodeUrl = qrCodeDataUrl;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å QR –∫–æ–¥–æ–º
        await pool.query(
          'UPDATE tracking_links SET qr_code_url = $1 WHERE link_id = $2',
          [qrCodeUrl, linkId]
        );
      } catch (qrError) {
        console.error('Error generating QR code:', qrError);
      }
    }

    console.log(`‚úÖ Created tracking link: ${linkId} for channel: ${channelCheck.rows[0].chat_title}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const baseUrl = `https://app.daniillepekhin.com/track/${linkId}`;
    const utmString = Object.keys(utmParams || {}).length > 0 
      ? '?' + Object.entries(utmParams).map(([key, value]) => `${key}=${encodeURIComponent(value)}`).join('&')
      : '';

    res.json({
      success: true,
      linkId,
      trackingUrl: baseUrl + utmString,
      qrCodeUrl,
      targetUrl: finalTargetUrl,
      abExperimentId
    });

  } catch (error) {
    console.error('Error creating tracking link:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–µ (–ø—Ä–æ–∫—Å–∏)
router.get('/track/:linkId', async (req, res) => {
  try {
    const { linkId } = req.params;
    const utmParams = req.query;
    
    console.log(`üîó Processing click for link: ${linkId}`, utmParams);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
    const linkResult = await pool.query(
      `SELECT tl.*, tc.chat_title, tc.username 
       FROM tracking_links tl
       JOIN telegram_chats tc ON tl.channel_id = tc.chat_id
       WHERE tl.link_id = $1 AND tl.is_active = true`,
      [linkId]
    );

    if (linkResult.rows.length === 0) {
      return res.status(404).send(`
        <!DOCTYPE html>
        <html>
          <head>
            <title>–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
              .container { background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: inline-block; }
              .emoji { font-size: 48px; margin-bottom: 20px; }
              h1 { color: #333; margin-bottom: 10px; }
              p { color: #666; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="emoji">üîó</div>
              <h1>–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
              <p>–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –º–æ–≥–ª–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞</p>
            </div>
          </body>
        </html>
      `);
    }

    const link = linkResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (link.expires_at && new Date() > new Date(link.expires_at)) {
      return res.status(410).send(`
        <!DOCTYPE html>
        <html>
          <head>
            <title>–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
              .container { background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: inline-block; }
              .emoji { font-size: 48px; margin-bottom: 20px; }
              h1 { color: #333; margin-bottom: 10px; }
              p { color: #666; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="emoji">‚è∞</div>
              <h1>–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</h1>
              <p>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</p>
            </div>
          </body>
        </html>
      `);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤
    if (link.auto_disable_after_clicks && link.click_count >= link.auto_disable_after_clicks) {
      return res.status(410).send(`
        <!DOCTYPE html>
        <html>
          <head>
            <title>–õ–∏–º–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
              .container { background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: inline-block; }
              .emoji { font-size: 48px; margin-bottom: 20px; }
              h1 { color: #333; margin-bottom: 10px; }
              p { color: #666; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="emoji">üö´</div>
              <h1>–õ–∏–º–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</h1>
              <p>–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</p>
            </div>
          </body>
        </html>
      `);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userAgent = req.headers['user-agent'] || '';
    const realIP = getRealIP(req);
    const geo = geoip.lookup(realIP);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º A/B –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    let abGroup = link.ab_test_group;
    if (link.ab_test_name) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      const hash = crypto.createHash('md5').update(realIP + link.link_id).digest('hex');
      const hashNumber = parseInt(hash.substring(0, 8), 16) % 100;
      // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
      const abExperiment = await pool.query(
        'SELECT groups FROM ab_experiments WHERE name = $1',
        [link.ab_test_name]
      );
      if (abExperiment.rows.length > 0) {
        const groups = JSON.parse(abExperiment.rows[0].groups);
        let currentPercent = 0;
        for (const [groupName, percentage] of Object.entries(groups)) {
          currentPercent += percentage;
          if (hashNumber < currentPercent) {
            abGroup = groupName;
            break;
          }
        }
      }
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ + –∏–∑ URL)
    const allUtmParams = { ...JSON.parse(link.default_utm_params || '{}'), ...utmParams };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–∫
    const clickResult = await pool.query(
      `INSERT INTO link_clicks (
        link_id, telegram_user_id, utm_params, user_agent, ip_address, 
        country, city, referer_url, device_type, browser, os, ab_test_group
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
      RETURNING id`,
      [
        linkId,
        null, // TODO: –ø–æ–ª—É—á–∞—Ç—å telegram_user_id –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        JSON.stringify(allUtmParams),
        userAgent,
        realIP,
        geo ? geo.country : null,
        geo ? geo.city : null,
        req.headers.referer || null,
        getDeviceType(userAgent),
        getBrowser(userAgent),
        getOS(userAgent),
        abGroup
      ]
    );

    console.log(`‚úÖ Click recorded for link ${linkId}: IP=${realIP}, Country=${geo?.country}, Device=${getDeviceType(userAgent)}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä—Ç–∞ WebApp –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const startToken = generateShortId(12);
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tracking_start_tokens (
        token TEXT PRIMARY KEY,
        link_id TEXT NOT NULL,
        utm_params JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        used_at TIMESTAMP
      );
    `);
    await pool.query(
      'INSERT INTO tracking_start_tokens (token, link_id, utm_params) VALUES ($1, $2, $3)',
      [startToken, linkId, JSON.stringify(allUtmParams)]
    );

    const botUsername = process.env.TELEGRAM_BOT_USERNAME || 'daniil_lepekhin_bot';
    const deepLink = `https://t.me/${botUsername}/app?startapp=${startToken}`;
    // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram, –≥–¥–µ WebApp –∑–∞–±–µ—Ä–µ—Ç —Ç–æ–∫–µ–Ω –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª/–ø–æ—Å—Ç
    return res.redirect(302, deepLink);

  } catch (error) {
    console.error('Error processing tracking link:', error);
    res.status(500).send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>–û—à–∏–±–∫–∞</title>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .emoji { font-size: 48px; margin-bottom: 20px; }
          </style>
        </head>
        <body>
          <div class="emoji">‚ùå</div>
          <h1>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</p>
        </body>
      </html>
    `);
  }
});

// WebApp —Å–æ–æ–±—â–∞–µ—Ç –æ —Å—Ç–∞—Ä—Ç–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–π redirectUrl
router.post('/webapp-start', async (req, res) => {
  try {
    const { token, user } = req.body || {};
    if (!token) {
      return res.status(400).json({ success: false, error: 'token is required' });
    }

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    await pool.query(`
      CREATE TABLE IF NOT EXISTS tracking_start_tokens (
        token TEXT PRIMARY KEY,
        link_id TEXT NOT NULL,
        utm_params JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        used_at TIMESTAMP
      );
    `);

    // –ò —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ä—Ç–æ–≤ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS link_starts (
        id SERIAL PRIMARY KEY,
        link_id TEXT NOT NULL,
        telegram_user_id BIGINT,
        utm_params JSONB,
        started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);

    const tokenRow = await pool.query('SELECT * FROM tracking_start_tokens WHERE token = $1', [token]);
    if (tokenRow.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'token not found' });
    }
    const tokenData = tokenRow.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    const linkResult = await pool.query(
      `SELECT tl.*, tc.chat_title, tc.username 
       FROM tracking_links tl
       JOIN telegram_chats tc ON tl.channel_id = tc.chat_id
       WHERE tl.link_id = $1`,
      [tokenData.link_id]
    );
    if (linkResult.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'link not found' });
    }
    const link = linkResult.rows[0];

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
    const telegramUserId = user?.id || null;
    await pool.query(
      'INSERT INTO link_starts (link_id, telegram_user_id, utm_params) VALUES ($1, $2, $3)',
      [tokenData.link_id, telegramUserId, tokenData.utm_params || null]
    );
    await pool.query('UPDATE tracking_start_tokens SET used_at = CURRENT_TIMESTAMP WHERE token = $1', [token]);

    // –ö–æ–Ω–µ—á–Ω—ã–π URL: –ø–æ—Å—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª
    const redirectUrl = link.target_url;
    return res.json({ success: true, redirectUrl });
  } catch (e) {
    console.error('webapp-start error:', e);
    return res.status(500).json({ success: false, error: 'internal error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/links', async (req, res) => {
  try {
    const result = await pool.query(
      `SELECT tl.*, tc.chat_title, tc.username,
              COUNT(lc.id) as total_clicks,
              COUNT(DISTINCT lc.country) as countries_count,
              COUNT(ls.id) as total_subscriptions
       FROM tracking_links tl
       LEFT JOIN telegram_chats tc ON tl.channel_id = tc.chat_id
       LEFT JOIN link_clicks lc ON tl.link_id = lc.link_id
       LEFT JOIN link_subscriptions ls ON tl.link_id = ls.link_id
       WHERE tl.creator_user_id = $1
       GROUP BY tl.id, tc.chat_title, tc.username
       ORDER BY tl.created_at DESC`,
      [1] // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
    );

    res.json({
      success: true,
      links: result.rows
    });

  } catch (error) {
    console.error('Error fetching links:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
router.get('/analytics/:linkId', async (req, res) => {
  try {
    const { linkId } = req.params;

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ
    const linkInfo = await pool.query(
      `SELECT tl.*, tc.chat_title, tc.username
       FROM tracking_links tl
       LEFT JOIN telegram_chats tc ON tl.channel_id = tc.chat_id
       WHERE tl.link_id = $1`,
      [linkId]
    );

    if (linkInfo.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤
    const clickStats = await pool.query(
      `SELECT 
         COUNT(*) as total_clicks,
         COUNT(DISTINCT country) as unique_countries,
         COUNT(DISTINCT DATE(clicked_at)) as active_days,
         device_type,
         COUNT(*) as device_count
       FROM link_clicks 
       WHERE link_id = $1
       GROUP BY device_type`,
      [linkId]
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    const countryStats = await pool.query(
      `SELECT country, city, COUNT(*) as clicks
       FROM link_clicks 
       WHERE link_id = $1 AND country IS NOT NULL
       GROUP BY country, city
       ORDER BY clicks DESC
       LIMIT 10`,
      [linkId]
    );

    // UTM –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    const utmStats = await pool.query(
      `SELECT utm_params, COUNT(*) as clicks
       FROM link_clicks 
       WHERE link_id = $1 AND utm_params IS NOT NULL
       GROUP BY utm_params
       ORDER BY clicks DESC`,
      [linkId]
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const timeStats = await pool.query(
      `SELECT 
         DATE(clicked_at) as date,
         COUNT(*) as clicks,
         COUNT(DISTINCT ip_address) as unique_visitors
       FROM link_clicks 
       WHERE link_id = $1 AND clicked_at >= CURRENT_DATE - INTERVAL '7 days'
       GROUP BY DATE(clicked_at)
       ORDER BY date`,
      [linkId]
    );

    // A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const abStats = await pool.query(
      `SELECT ab_test_group, COUNT(*) as clicks
       FROM link_clicks 
       WHERE link_id = $1 AND ab_test_group IS NOT NULL
       GROUP BY ab_test_group
       ORDER BY clicks DESC`,
      [linkId]
    );

    res.json({
      success: true,
      link: linkInfo.rows[0],
      analytics: {
        clicks: clickStats.rows,
        countries: countryStats.rows,
        utm: utmStats.rows,
        timeline: timeStats.rows,
        abTesting: abStats.rows
      }
    });

  } catch (error) {
    console.error('Error fetching analytics:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
router.delete('/links/:linkId', async (req, res) => {
  try {
    const { linkId } = req.params;

    await pool.query(
      'UPDATE tracking_links SET is_active = false WHERE link_id = $1 AND creator_user_id = $2',
      [linkId, 1] // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
    );

    res.json({
      success: true,
      message: '–°—Å—ã–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
    });

  } catch (error) {
    console.error('Error deleting link:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏'
    });
  }
});

module.exports = router;