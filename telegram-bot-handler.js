// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –ø–æ—Å—Ç–∞–º

const TelegramBot = require('node-telegram-bot-api');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN';
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const trackingData = new Map();
const userActions = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
bot.onText(/\/start (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const params = match[1];
  
  try {
    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if (params.startsWith('track_')) {
      await handleTrackingLink(msg, params);
    } else {
      // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
      await sendWelcomeMessage(msg);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
async function handleTrackingLink(msg, params) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const [trackingId, postId] = params.replace('track_', '').split('_');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
    const clickData = {
      trackingId,
      postId,
      userId,
      username,
      timestamp: new Date().toISOString(),
      userAgent: 'Telegram Bot',
      source: 'telegram_bot'
    };
    
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', clickData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
    if (!trackingData.has(trackingId)) {
      trackingData.set(trackingId, {
        clicks: [],
        stats: {
          totalClicks: 0,
          uniqueVisitors: 0,
          conversions: 0,
          unsubscribes: 0
        }
      });
    }
    
    const tracking = trackingData.get(trackingId);
    tracking.clicks.push(clickData);
    tracking.stats.totalClicks++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const uniqueUsers = new Set(tracking.clicks.map(click => click.userId));
    tracking.stats.uniqueVisitors = uniqueUsers.size;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç', callback_data: `view_post_${postId}` },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `stats_${trackingId}` }
        ],
        [
          { text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `subscribe_${trackingId}` },
          { text: '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `unsubscribe_${trackingId}` }
        ],
        [
          { text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_${trackingId}` },
          { text: 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: `comment_${trackingId}` }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, 
      `üîó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
      `–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n` +
      `ID –ø–æ—Å—Ç–∞: ${postId}\n` +
      `ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${trackingId}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, 
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  try {
    const [action, id] = data.split('_');
    
    switch (action) {
      case 'view':
        await handleViewPost(chatId, id);
        break;
      case 'stats':
        await handleShowStats(chatId, id);
        break;
      case 'subscribe':
        await handleSubscribe(chatId, id, userId);
        break;
      case 'unsubscribe':
        await handleUnsubscribe(chatId, id, userId);
        break;
      case 'share':
        await handleShare(chatId, id);
        break;
      case 'comment':
        await handleComment(chatId, id);
        break;
      default:
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await bot.answerCallbackQuery(callbackQuery.id);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞
async function handleViewPost(chatId, postId) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ
  const postUrl = `https://t.me/kristina_egiazarova14/${postId}`;
  
  await bot.sendMessage(chatId,
    `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ:\n\n` +
    `ID –ø–æ—Å—Ç–∞: ${postId}\n` +
    `–°—Å—ã–ª–∫–∞: ${postUrl}\n\n` +
    `–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞.`
  );
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å—Ç ${postId}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function handleShowStats(chatId, trackingId) {
  const tracking = trackingData.get(trackingId);
  
  if (!tracking) {
    await bot.sendMessage(chatId, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }
  
  const stats = tracking.stats;
  const recentClicks = tracking.clicks.slice(-5); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
  
  let statsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n`;
  statsMessage += `üë• –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${stats.totalClicks}\n`;
  statsMessage += `üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${stats.uniqueVisitors}\n`;
  statsMessage += `‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: ${stats.conversions}\n`;
  statsMessage += `‚ùå –û—Ç–ø–∏—Å–æ–∫: ${stats.unsubscribes}\n\n`;
  
  if (recentClicks.length > 0) {
    statsMessage += `üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:\n`;
    recentClicks.forEach((click, index) => {
      const time = new Date(click.timestamp).toLocaleString();
      statsMessage += `${index + 1}. ${click.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} - ${time}\n`;
    });
  }
  
  await bot.sendMessage(chatId, statsMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function handleSubscribe(chatId, trackingId, userId) {
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const actionData = {
    trackingId,
    userId,
    action: 'subscribe',
    timestamp: new Date().toISOString()
  };
  
  console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', actionData);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const tracking = trackingData.get(trackingId);
  if (tracking) {
    tracking.stats.conversions++;
  }
  
  await bot.sendMessage(chatId, 
    `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n` +
    `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
async function handleUnsubscribe(chatId, trackingId, userId) {
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø–∏—Å–∫—É
  const actionData = {
    trackingId,
    userId,
    action: 'unsubscribe',
    timestamp: new Date().toISOString()
  };
  
  console.log('–û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', actionData);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const tracking = trackingData.get(trackingId);
  if (tracking) {
    tracking.stats.unsubscribes++;
  }
  
  await bot.sendMessage(chatId, 
    `‚ùå –û—Ç–ø–∏—Å–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞\n\n` +
    `–í–∞—à–∞ –æ—Ç–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ—Å—Ç–∞
async function handleShare(chatId, trackingId) {
  const shareUrl = `https://t.me/share/url?url=https://t.me/your_bot?start=track_${trackingId}`;
  
  await bot.sendMessage(chatId,
    `üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π:\n\n` +
    `–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞: ${shareUrl}\n\n` +
    `–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é.`
  );
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–ø–æ—Å—Ç
  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –ø–æ–¥–µ–ª–∏–ª—Å—è —Å—Å—ã–ª–∫–æ–π ${trackingId}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function handleComment(chatId, trackingId) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  userActions.set(chatId, { action: 'comment', trackingId });
  
  await bot.sendMessage(chatId,
    `üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n` +
    `–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É.`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  const userAction = userActions.get(chatId);
  
  if (userAction && userAction.action === 'comment') {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const commentData = {
      trackingId: userAction.trackingId,
      userId,
      username: msg.from.username,
      comment: text,
      timestamp: new Date().toISOString()
    };
    
    console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', commentData);
    
    await bot.sendMessage(chatId,
      `üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n\n` +
      `–í–∞—à –æ—Ç–∑—ã–≤: "${text}"\n\n` +
      `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.`
    );
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userActions.delete(chatId);
  }
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendWelcomeMessage(msg) {
  const chatId = msg.chat.id;
  
  await bot.sendMessage(chatId,
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n` +
    `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∞ –ø–æ—Å—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n` +
    `üîó –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ WebApp.\n\n` +
    `üìä –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω...');

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  bot,
  trackingData,
  userActions
}; 